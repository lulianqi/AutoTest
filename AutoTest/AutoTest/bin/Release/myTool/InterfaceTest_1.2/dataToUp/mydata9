using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using System.Xml;
using HttpDome.myTool;
using System.Net;
using System.IO;
using System.Threading;
using System.Security.Cryptography;
using System.Collections;
using System.Diagnostics;
using System.Web;
using System.Collections.Specialized;

using System.Linq;

/*******************************************************************************
* Copyright (c) 2013,浙江风向标科技有限公司
* All rights reserved.
* 
* 文件名称: 
* 内容摘要: mycllq@hotmail.com
* 
* 历史记录:
* 日	  期:   201309016           创建人: 测试部 李杰 15158155511
* 描    述: 创建
*******************************************************************************/

namespace HttpDome
{
    public partial class   InterfaceTest : Form
    {
        public InterfaceTest()
        {
            InitializeComponent();
        }

        /// <summary>
        /// 随机参数
        /// </summary>
        public class createRandomParameter
        {
            string tempHead;
            Random myRandom;
            int myStart;
            int myEnd;
            public createRandomParameter(string headStr, int startStr, int endStr)
            {
                tempHead = headStr;
                myRandom = new Random();
                myStart = startStr;
                myEnd = endStr;
            }
            public string getNext()
            {
                int tempNum = myRandom.Next(myStart, myEnd);
                return tempHead + tempNum.ToString();
            }
        }


        #region basicDefined
        string[] myApiNameArray;                                                                //api接口名列表
        XmlNode showApiTipNode;                                                                 //正在显示的数据结构提示
        int dataListNum;                                                                        //被显示的返回结果记数
        Hashtable myHashtable = new Hashtable();                                                //填充数据参数的表
        string httpMethod = "POST";                                                             //http请求发送方式

        HttpProc.WebClient client = new HttpProc.WebClient();
        #endregion


        /// <summary>
        /// 返回URL内容,带POST数据提交
        /// </summary>
        /// <param name="url"></param>
        /// <param name="data"></param>
        /// <param name="method">GET/POST(默认)</param>
        /// <returns></returns>
        public static string SendData(string url, string data, string method ,bool isSaveFile)
        {
            string re = "";
            try
            {
                WebRequest wr = WebRequest.Create(url);
                wr.Method = method;
                wr.ContentType = "application/x-www-form-urlencoded";
                //wr.ContentType = "multipart/form-data";
                char[] reserved = { '?', '=', '&' };
                StringBuilder UrlEncoded = new StringBuilder();
                byte[] SomeBytes = null;
                if (data != null && method!="GET")
                {
                    SomeBytes = Encoding.UTF8.GetBytes(data);
                    wr.ContentLength = SomeBytes.Length;
                    Stream newStream = wr.GetRequestStream();
                    newStream.Write(SomeBytes, 0, SomeBytes.Length);
                    newStream.Close();
                }
                else
                {
                    wr.ContentLength = 0;
                }


                WebResponse result = wr.GetResponse();

                Stream ReceiveStream = result.GetResponseStream();


                if (isSaveFile)
                {
                    //StreamWriter myFile = new StreamWriter(System.Windows.Forms.Application.StartupPath + "\\dataToDown\\" + "mydata");
                    byte[] infbytes = new byte[30480];
                    int tempLen = 512;
                    int offset = 0;

                    //数据最多20k可以不需要分段读取
                    //while (tempLen > 0)
                    //{
                    //    tempLen = ReceiveStream.Read(infbytes, offset, 512);
                    //    offset += tempLen;
                    //}
                    //byte[] bytesToSave = new byte[offset];
                    //for (int i = 0; i < offset; i++)
                    //{
                    //    bytesToSave[i] = infbytes[i];
                    //}
                    //File.WriteAllBytes(System.Windows.Forms.Application.StartupPath + "\\dataToDown\\" + "mydata", bytesToSave);

                    //直接一次读取
                    tempLen = ReceiveStream.Read(infbytes, 0, 20480);
                    byte[] bytesToSave = new byte[tempLen];
                    for (int i = 0; i < tempLen; i++)
                    {
                        bytesToSave[i] = infbytes[i];
                    }
                    File.WriteAllBytes(System.Windows.Forms.Application.StartupPath + "\\dataToDown\\" + "mydata", bytesToSave);

                }

                Byte[] read = new Byte[512];
                int bytes = ReceiveStream.Read(read, 0, 512);

                re = "";
                Encoding encode = System.Text.Encoding.GetEncoding("UTF-8");

                while (bytes > 0)
                {
                    re += encode.GetString(read, 0, bytes);
                    bytes = ReceiveStream.Read(read, 0, 512);
                }
            }

            catch (WebException wex)
            {
                re = "Error:  " + wex.Message + "\r\n";
                if (wex.Response != null)
                {
                    using (var errorResponse = (HttpWebResponse)wex.Response)
                    {
                        re += "StatusCode:  " + Convert.ToInt32(((HttpWebResponse)wex.Response).StatusCode) + "\r\n";
                        using (var reader = new StreamReader(errorResponse.GetResponseStream()))
                        {
                            re += reader.ReadToEnd();
                        }
                    }
                }
            }

            catch (Exception ex)
            {
                re = ex.Message; 
                ErrorLog.PutInLog("ID:0090 " + ex.InnerException);
            }
            return re;
        }

        /// <summary>
        /// 返回URL内容,带POST数据提交
        /// </summary>
        /// <param name="url"></param>
        /// <param name="data"></param>
        /// <param name="method">GET/POST(默认)</param>
        /// <returns></returns>
        public static string SendData(string url, string data, string method)
        {
            string re = "";
            try
            {
                WebRequest wr = WebRequest.Create(url);
                wr.Method = method;
                wr.ContentType = "application/x-www-form-urlencoded";
                //wr.ContentType = "multipart/form-data";
                char[] reserved = { '?', '=', '&' };
                StringBuilder UrlEncoded = new StringBuilder();
                byte[] SomeBytes = null;
                if (data != null && method != "GET")
                {
                    SomeBytes = Encoding.UTF8.GetBytes(data);
                    wr.ContentLength = SomeBytes.Length;
                    Stream newStream = wr.GetRequestStream();
                    newStream.Write(SomeBytes, 0, SomeBytes.Length);
                    newStream.Close();
                }
                else
                {
                    wr.ContentLength = 0;
                }


                WebResponse result = wr.GetResponse();

                Stream ReceiveStream = result.GetResponseStream();

                Byte[] read = new Byte[512];
                int bytes = ReceiveStream.Read(read, 0, 512);

                re = "";
                while (bytes > 0)
                {
                    Encoding encode = System.Text.Encoding.GetEncoding("UTF-8");
                    re += encode.GetString(read, 0, bytes);
                    bytes = ReceiveStream.Read(read, 0, 512);
                }
            }

            catch (WebException wex)
            {
                re = "Error:  " + wex.Message + "\r\n";
                if (wex.Response != null)
                {
                    using (var errorResponse = (HttpWebResponse)wex.Response)
                    {
                        re += "StatusCode:  " + Convert.ToInt32(((HttpWebResponse)wex.Response).StatusCode) + "\r\n";
                        using (var reader = new StreamReader(errorResponse.GetResponseStream()))
                        {
                            re += reader.ReadToEnd();
                        }
                    }
                }
            }

            catch (Exception ex)
 
                        return;
                    }
                }
            }

            #region fill the hash
            myReceiveData.randomKey = null;
            myReceiveData.myhttpDataHstb.Clear();
            myReceiveData.myhttpDataHstb.Add("timestamp", tb_timestamp.Text);
            myReceiveData.myhttpDataHstb.Add("key", tb_app_key.Text);//Change spot
            //myReceiveData.myhttpDataHstb.Add("v", tb_v.Text);

            if (showApiTipNode != null)
            {
                //植入业务数据
                if (showApiTipNode.ChildNodes[2] != null)
                {
                    myReceiveData.myhttpDataHstb.Add(showApiTipNode.ChildNodes[2].Name, tb_AipName1.Text);
                    if (cb_isdel1.Checked)
                    {
                        myReceiveData.randomKey = showApiTipNode.ChildNodes[2].Name;
                    }
                }
                if (showApiTipNode.ChildNodes[3] != null)
                {
                    myReceiveData.myhttpDataHstb.Add(showApiTipNode.ChildNodes[3].Name, tb_AipName2.Text);
                    if (cb_isdel2.Checked)
                    {
                        myReceiveData.randomKey = showApiTipNode.ChildNodes[3].Name;
                    }
                }
                if (showApiTipNode.ChildNodes[4] != null)
                {
                    myReceiveData.myhttpDataHstb.Add(showApiTipNode.ChildNodes[4].Name, tb_AipName3.Text);
                    if (cb_isdel3.Checked)
                    {
                        myReceiveData.randomKey = showApiTipNode.ChildNodes[4].Name;
                    }
                }
                if (showApiTipNode.ChildNodes[5] != null)
                {
                    myReceiveData.myhttpDataHstb.Add(showApiTipNode.ChildNodes[5].Name, tb_AipName4.Text);
                    if (cb_isdel4.Checked)
                    {
                        myReceiveData.randomKey = showApiTipNode.ChildNodes[5].Name;
                    }
                }
                if (showApiTipNode.ChildNodes[6] != null)
                {
                    myReceiveData.myhttpDataHstb.Add(showApiTipNode.ChildNodes[6].Name, tb_AipName5.Text);
                    if (cb_isdel5.Checked)
                    {
                        myReceiveData.randomKey = showApiTipNode.ChildNodes[6].Name;
                    }
                }
                if (showApiTipNode.ChildNodes[7] != null)
                {
                    myReceiveData.myhttpDataHstb.Add(showApiTipNode.ChildNodes[7].Name, tb_AipName6.Text);
                    if (cb_isdel6.Checked)
                    {
                        myReceiveData.randomKey = showApiTipNode.ChildNodes[7].Name;
                    }
                }
                if (showApiTipNode.ChildNodes[8] != null)
                {
                    myReceiveData.myhttpDataHstb.Add(showApiTipNode.ChildNodes[8].Name, tb_AipName7.Text);
                    if (cb_isdel7.Checked)
                    {
                        myReceiveData.randomKey = showApiTipNode.ChildNodes[8].Name;
                    }
                }
                if (showApiTipNode.ChildNodes[9] != null)
                {
                    myReceiveData.myhttpDataHstb.Add(showApiTipNode.ChildNodes[9].Name, tb_AipName8.Text);
                    if (cb_isdel8.Checked)
                    {
                        myReceiveData.randomKey = showApiTipNode.ChildNodes[9].Name;
                    }
                }
                if (showApiTipNode.ChildNodes[10] != null)
                {
                    myReceiveData.myhttpDataHstb.Add(showApiTipNode.ChildNodes[10].Name, tb_AipName9.Text);
                    if (cb_isdel9.Checked)
                    {
                        myReceiveData.randomKey = showApiTipNode.ChildNodes[10].Name;
                    }
                }
                //设置app_secret
                myReceiveData.randomApp_secret = tb_app_secret.Text;
                //设置可变值
                if (myReceiveData.randomKey != null)
                {
                    myReceiveData.randomValue = myReceiveData.myhttpDataHstb[myReceiveData.randomKey].ToString();
                }
                else
                {
                    //没有勾选任何项，置空该项，后面数据组装时也将不识别。
                    myReceiveData.randomValue = "";
                }
                //排序
                myReceiveData.akeysRandom = new ArrayList(myReceiveData.myhttpDataHstb.Keys);
                myReceiveData.akeysRandom.Sort();
            }
            else
            {
                MessageBox.Show("请先选择数据源", "STOP");
                return;
            }

            #endregion

            myCrtRdmPmt = new createRandomParameter(myReceiveData.randomValue, myReceiveData.vaneStr, myReceiveData.vaneEnd);

            if (!checkBox_IsLock.Checked)
            {
                rtb_DataToSend.Clear();
                rtb_DataToSend.Text = createUrl();
            }
            if (httpMethod == "POST")
            {
                SendMoreData(tb_Url.Text + tb_ApiName.Text, rtb_DataToSend.Text, httpMethod, (int)(numericUpDown_Send1.Value), (int)(numericUpDown_Send2.Value));
            }
            else if (httpMethod == "GET")
            {
                SendMoreData(tb_Url.Text + tb_ApiName.Text + "?" + rtb_DataToSend.Text, null, httpMethod, (int)(numericUpDown_Send1.Value), (int)(numericUpDown_Send2.Value));
            }
            else
            {
                MessageBox.Show("不支持的提交方式");
            }
        }

        private void bt_test3_Click(object sender, EventArgs e)
        {

            dataReceive mydataReceive = new dataReceive();
            mydataReceive.Show();
        }

        private void timer_ShowInfor_Tick(object sender, EventArgs e)
        {

        }

        private void comboBox_httpMethod_SelectedIndexChanged(object sender, EventArgs e)
        {
            httpMethod = comboBox_httpMethod.Text;
        }

        private void bt_nowTime_Click(object sender, EventArgs e)
        {
            //tb_timestamp.Text = DateTime.Now.ToLocalTime().ToString();  
            tb_timestamp.Text = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss");  
        }

        private void bt_newMD5_Click(object sender, EventArgs e)

                    FileStream fs = new FileStream(tempFilePathForBack, FileMode.Create, FileAccess.Write);//创建写入文件 
                    StreamWriter sw = new StreamWriter(fs);
                    sw.WriteLine(DateTime.Now.ToString());
                    sw.WriteLine("Start");
                    sw.Write(richTextBox_infor.Text);
                    sw.WriteLine("End");
                    sw.WriteLine(" ");
                    sw.Close();
                    fs.Close();
                    MessageBox.Show("保存成功，请到测试结果文件中查看", "Sucess");
                }
                else
                {
                    FileStream fs = new FileStream(tempFilePathForBack, FileMode.Append, FileAccess.Write);
                    StreamWriter sw = new StreamWriter(fs);
                    sw.WriteLine("+++++++++++++++++++++++++++++++++++++++++++++++++++++++");
                    sw.WriteLine(DateTime.Now.ToString());
                    sw.WriteLine("Start");
                    sw.Write(richTextBox_infor.Text);
                    sw.WriteLine("End");
                    sw.WriteLine(" ");
                    sw.Close();
                    fs.Close();
                    if (MessageBox.Show("追加保存成功，请到测试结果文件中查看,是否要清除显示框？", "Sucess", MessageBoxButtons.OKCancel) == DialogResult.OK)
                    {
                        bt_claer_Click(sender, e);
                    }
                }dddddddddddddhddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
            }
            catch (Exception ex)
            {
                MessageBox.Show("保存文件错误，详情请查看错误日志", "Stop");
                ErrorLog.PutInLog("ID:1940  " + ex.Message);
				ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
            }
        }

        private void bt_newAddTest_Click(object sender, EventArgs e)
        {
            newAddTest fmNewAddTest = new newAddTest();
            fmNewAddTest.Show();
        }

        private void bt_newAddTestForbingEndpoint_Click(object sender, EventArgs e)
        {

            newAddTestForbingEndpoint fmnewAddTestForbingEndpoint = new newAddTestForbingEndpoint();
            fmnewAddTestForbingEndpoint.Show();
        }

        private void 帮助ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start(System.Environment.CurrentDirectory + "\\help\\VaneHttpSend.chm");
        }

        private void 更新记录ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start(System.Environment.CurrentDirectory + "\\help\\vaneupdatainfo.txt");
        }

        //设置可变范围
        private void bt_setRm_Click(object sender, EventArgs e)
        {
            if (ts.Count != 0)
            {
                foreach (Thread th in ts)
                {
                    if (th.ThreadState != System.Threading.ThreadState.Stopped)
                    {
                        ProcessThreadCollection threads = Process.GetCurrentProcess().Threads;
                        MessageBox.Show("任务正在进行请勿修改" + threads.Count.ToString(), "STOP");
                        return;
                    }
                }
            }
            if((int)(numericUpDown_Send1.Value)<(int)(numericUpDown_Send2.Value))
            {
                myReceiveData.vaneStr = (int)(numericUpDown_Send1.Value);
                myReceiveData.vaneEnd = (int)(numericUpDown_Send2.Value);
                MessageBox.Show("设置完成" + numericUpDown_Send1.Value + "-" + numericUpDown_Send2.Value);
                numericUpDown_Send1.Value = numericUpDown_Send2.Value = 1;
            }
            else
            {
                MessageBox.Show("输入值不合法");
            }
        
        }

        private void richTextBox1_Leave(object sender, EventArgs e)
        {
            richTextBox2.Text = HttpUtility.UrlPathEncode(richTextBox1.Text); 
        }


    }
}
1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
12345678901234567890123456789dddddddddddddd01234567890121234656789012345678900rrrrrrrrr
