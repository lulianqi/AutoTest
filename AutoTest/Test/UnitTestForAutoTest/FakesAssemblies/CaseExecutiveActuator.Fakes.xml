<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CaseExecutiveActuator.Fakes</name>
    </assembly>
    <members>
        <member name="T:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver">
            <summary>CaseExecutiveActuator.CaseMefHelper.MefPlugInDriver 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.#ctor(CaseExecutiveActuator.CaseMefHelper.MefPlugInDriver)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.Compose">
            <summary>设置 MefPlugInDriver.Compose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.Constructor">
            <summary>设置 MefPlugInDriver.MefPlugInDriver() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.ExtendTestGet">
            <summary>设置 MefPlugInDriver.get_ExtendTest() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.ExtendTestSetIExtendProtocolDriver">
            <summary>设置 MefPlugInDriver.set_ExtendTest(IExtendProtocolDriver value) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.AllInstances.Compose">
            <summary>设置 MefPlugInDriver.Compose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.AllInstances.ExtendTestGet">
            <summary>设置 MefPlugInDriver.get_ExtendTest() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.AllInstances.ExtendTestSetIExtendProtocolDriver">
            <summary>设置 MefPlugInDriver.set_ExtendTest(IExtendProtocolDriver value) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.CaseMefHelper.Fakes.StubIExtendProtocolDriver">
            <summary>CaseExecutiveActuator.CaseMefHelper.IExtendProtocolDriver 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.CaseMefHelper.Fakes.StubIExtendProtocolDriver.#ctor">
            <summary>初始化 type StubIExtendProtocolDriver 的新实例</summary>
        </member>
        <member name="F:CaseExecutiveActuator.CaseMefHelper.Fakes.StubIExtendProtocolDriver.ExtendProtocolNameGet">
            <summary>设置 IExtendProtocolDriver.get_ExtendProtocolName() 的 stub</summary>
        </member>
        <member name="P:CaseExecutiveActuator.CaseMefHelper.Fakes.StubIExtendProtocolDriver.cea::CaseExecutiveActuator#CaseMefHelper#IExtendProtocolDriver#ExtendProtocolName">
            <summary>设置 IExtendProtocolDriver.get_ExtendProtocolName() 的 stub</summary>
        </member>
        <member name="T:CaseExecutiveActuator.CaseMefHelper.Fakes.StubMefPlugInDriver">
            <summary>CaseExecutiveActuator.CaseMefHelper.MefPlugInDriver 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.CaseMefHelper.Fakes.StubMefPlugInDriver.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.CaseMefHelper.Fakes.StubMefPlugInDriver.InitializeStub">
            <summary>初始化 type StubMefPlugInDriver 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.CaseMefHelper.Fakes.StubMefPlugInDriver.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.CaseMefHelper.Fakes.StubMefPlugInDriver.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.CaseMefHelper.Fakes.StubMefPlugInDriver.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell">
            <summary>CaseExecutiveActuator.Cell.CaseCell 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.#ctor(CaseExecutiveActuator.Cell.CaseCell)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AddCaseCell">
            <summary>设置 CaseCell.Add(CaseCell yourCaseCell) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.CaseRunDataGet">
            <summary>设置 CaseCell.get_CaseRunData() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.CaseRunDataSetmyRunCaseDataOfICaseExecutionContent">
            <summary>设置 CaseCell.set_CaseRunData(myRunCaseData`1&lt;ICaseExecutionContent&gt; value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.CaseTypeGet">
            <summary>设置 CaseCell.get_CaseType() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.CaseXmlNodeGet">
            <summary>设置 CaseCell.get_CaseXmlNode() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.CaseXmlNodeSetXmlNode">
            <summary>设置 CaseCell.set_CaseXmlNode(XmlNode value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.ChildCellsGet">
            <summary>设置 CaseCell.get_ChildCells() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.Constructor">
            <summary>设置 CaseCell.CaseCell() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.ConstructorCaseTypeXmlNodemyRunCaseDataOfICaseExecutionContent">
            <summary>设置 CaseCell.CaseCell(CaseType yourCaseType, XmlNode yourXmlNode, myRunCaseData`1&lt;ICaseExecutionContent&gt; yourCaseRunData) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.IsHasChildGet">
            <summary>设置 CaseCell.get_IsHasChild() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.IsHasNextCellGet">
            <summary>设置 CaseCell.get_IsHasNextCell() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.IsHasParentGet">
            <summary>设置 CaseCell.get_IsHasParent() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.NextCellGet">
            <summary>设置 CaseCell.get_NextCell() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.ParentCellGet">
            <summary>设置 CaseCell.get_ParentCell() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.SetNextCellCaseCell">
            <summary>设置 CaseCell.SetNextCell(CaseCell yourCaseCell) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.SetParentCellCaseCell">
            <summary>设置 CaseCell.SetParentCell(CaseCell yourCaseCell) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.UiTagGet">
            <summary>设置 CaseCell.get_UiTag() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.UiTagSetObject">
            <summary>设置 CaseCell.set_UiTag(Object value) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.AddCaseCell">
            <summary>设置 CaseCell.Add(CaseCell yourCaseCell) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.CaseRunDataGet">
            <summary>设置 CaseCell.get_CaseRunData() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.CaseRunDataSetmyRunCaseDataOfICaseExecutionContent">
            <summary>设置 CaseCell.set_CaseRunData(myRunCaseData`1&lt;ICaseExecutionContent&gt; value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.CaseTypeGet">
            <summary>设置 CaseCell.get_CaseType() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.CaseXmlNodeGet">
            <summary>设置 CaseCell.get_CaseXmlNode() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.CaseXmlNodeSetXmlNode">
            <summary>设置 CaseCell.set_CaseXmlNode(XmlNode value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.ChildCellsGet">
            <summary>设置 CaseCell.get_ChildCells() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.IsHasChildGet">
            <summary>设置 CaseCell.get_IsHasChild() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.IsHasNextCellGet">
            <summary>设置 CaseCell.get_IsHasNextCell() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.IsHasParentGet">
            <summary>设置 CaseCell.get_IsHasParent() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.NextCellGet">
            <summary>设置 CaseCell.get_NextCell() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.ParentCellGet">
            <summary>设置 CaseCell.get_ParentCell() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.SetNextCellCaseCell">
            <summary>设置 CaseCell.SetNextCell(CaseCell yourCaseCell) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.SetParentCellCaseCell">
            <summary>设置 CaseCell.SetParentCell(CaseCell yourCaseCell) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.UiTagGet">
            <summary>设置 CaseCell.get_UiTag() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.UiTagSetObject">
            <summary>设置 CaseCell.set_UiTag(Object value) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection">
            <summary>CaseExecutiveActuator.Cell.ProjctCollection 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.#ctor(CaseExecutiveActuator.Cell.ProjctCollection)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.AddCaseCell">
            <summary>设置 ProjctCollection.Add(CaseCell yourCaseCell) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.Constructor">
            <summary>设置 ProjctCollection.ProjctCollection() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.ItemGetInt32Int32">
            <summary>设置 ProjctCollection.get_Item(Int32 indexP, Int32 indexC) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.ProjectCellsGet">
            <summary>设置 ProjctCollection.get_ProjectCells() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.AllInstances.AddCaseCell">
            <summary>设置 ProjctCollection.Add(CaseCell yourCaseCell) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.AllInstances.ItemGetInt32Int32">
            <summary>设置 ProjctCollection.get_Item(Int32 indexP, Int32 indexC) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.AllInstances.ProjectCellsGet">
            <summary>设置 ProjctCollection.get_ProjectCells() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Cell.Fakes.StubCaseCell">
            <summary>CaseExecutiveActuator.Cell.CaseCell 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.StubCaseCell.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.StubCaseCell.#ctor(CaseExecutiveActuator.CaseType,System.Xml.XmlNode,CaseExecutiveActuator.myRunCaseData{CaseExecutiveActuator.ICaseExecutionContent})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.StubCaseCell.InitializeStub">
            <summary>初始化 type StubCaseCell 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.StubCaseCell.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.StubCaseCell.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.StubCaseCell.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Cell.Fakes.StubProjctCollection">
            <summary>CaseExecutiveActuator.Cell.ProjctCollection 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.StubProjctCollection.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.StubProjctCollection.InitializeStub">
            <summary>初始化 type StubProjctCollection 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.StubProjctCollection.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.StubProjctCollection.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.StubProjctCollection.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection">
            <summary>CaseExecutiveActuator.ActuatorStaticDataCollection 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.#ctor(CaseExecutiveActuator.ActuatorStaticDataCollection)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.Bind(System.ICloneable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.Clone">
            <summary>设置 ActuatorStaticDataCollection.Clone() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.Constructor">
            <summary>设置 ActuatorStaticDataCollection.ActuatorStaticDataCollection() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.ConstructorDictionaryOfStringStringDictionaryOfStringIRunTimeStaticDataDictionaryOfStringIRunTimeDataSource">
            <summary>设置 ActuatorStaticDataCollection.ActuatorStaticDataCollection(Dictionary`2&lt;String,String&gt; yourActuatorParameterList, Dictionary`2&lt;String,IRunTimeStaticData&gt; yourActuatorStaticDataList, Dictionary`2&lt;String,IRunTimeDataSource&gt; yourActuatorStaticDataSouceList) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.Dispose">
            <summary>设置 ActuatorStaticDataCollection.Dispose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.RunActuatorParameterListGet">
            <summary>设置 ActuatorStaticDataCollection.get_RunActuatorParameterList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.RunActuatorStaticDataListGet">
            <summary>设置 ActuatorStaticDataCollection.get_RunActuatorStaticDataList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.RunActuatorStaticDataSouceListGet">
            <summary>设置 ActuatorStaticDataCollection.get_RunActuatorStaticDataSouceList() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.AllInstances.Clone">
            <summary>设置 ActuatorStaticDataCollection.Clone() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.AllInstances.Dispose">
            <summary>设置 ActuatorStaticDataCollection.Dispose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.AllInstances.RunActuatorParameterListGet">
            <summary>设置 ActuatorStaticDataCollection.get_RunActuatorParameterList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.AllInstances.RunActuatorStaticDataListGet">
            <summary>设置 ActuatorStaticDataCollection.get_RunActuatorStaticDataList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.AllInstances.RunActuatorStaticDataSouceListGet">
            <summary>设置 ActuatorStaticDataCollection.get_RunActuatorStaticDataSouceList() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimCaseActionActuator">
            <summary>CaseExecutiveActuator.CaseActionActuator 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.#ctor(CaseExecutiveActuator.CaseActionActuator)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.Bind(System.ICloneable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AddExecutionDeviceStringIConnectExecutiveData">
            <summary>设置 CaseActionActuator.AddExecutionDevice(String yourDeviceName, IConnectExecutiveData yourDeviceConnectInfo) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AddExecutionResultmyExecutionDeviceResult">
            <summary>设置 CaseActionActuator.AddExecutionResult(myExecutionDeviceResult yourExecutionResult) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AddRunActuatorParameterStringString">
            <summary>设置 CaseActionActuator.AddRunActuatorParameter(String yourParameterName, String yourParameterVaule) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.ClearInvalidThreadList">
            <summary>设置 CaseActionActuator.ClearInvalidThreadList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.Clone">
            <summary>设置 CaseActionActuator.Clone() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.ConnectExecutionDevice">
            <summary>设置 CaseActionActuator.ConnectExecutionDevice() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.Constructor">
            <summary>设置 CaseActionActuator.CaseActionActuator() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.ConstructorString">
            <summary>设置 CaseActionActuator.CaseActionActuator(String yourName) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.CreateNewActuatorTask">
            <summary>设置 CaseActionActuator.CreateNewActuatorTask() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.CreateNewActuatorTryCaseCell">
            <summary>设置 CaseActionActuator.CreateNewActuatorTry(CaseCell yourTryNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.DisconnectExecutionDevice">
            <summary>设置 CaseActionActuator.DisconnectExecutionDevice() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.Dispose">
            <summary>设置 CaseActionActuator.Dispose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.DisposeBoolean">
            <summary>设置 CaseActionActuator.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.ErrorInfoGet">
            <summary>设置 CaseActionActuator.get_ErrorInfo() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.ExecutiveActuatorTask">
            <summary>设置 CaseActionActuator.ExecutiveActuatorTask() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.ExecutiveActuatorTryObject">
            <summary>设置 CaseActionActuator.ExecutiveActuatorTry(Object yourTryNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.ExecutiveThinkTimeGet">
            <summary>设置 CaseActionActuator.get_ExecutiveThinkTime() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.ExecutiveThinkTimeSetInt32">
            <summary>设置 CaseActionActuator.set_ExecutiveThinkTime(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.IsActionActuatorCanRunCaseCell">
            <summary>设置 CaseActionActuator.IsActionActuatorCanRun(CaseCell yourStartNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.IsActuatorDataFillGet">
            <summary>设置 CaseActionActuator.get_IsActuatorDataFill() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.KillAll">
            <summary>设置 CaseActionActuator.KillAll() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.LoadScriptRunTimeXmlNode">
            <summary>设置 CaseActionActuator.LoadScriptRunTime(XmlNode sourceNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.MyNameGet">
            <summary>设置 CaseActionActuator.get_MyName() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.MyNameSetString">
            <summary>设置 CaseActionActuator.set_MyName(String value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.NowExecutionDeviceListGet">
            <summary>设置 CaseActionActuator.get_NowExecutionDeviceList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.NowExecutionResultListGet">
            <summary>设置 CaseActionActuator.get_NowExecutionResultList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.NowExecutiveDataGet">
            <summary>设置 CaseActionActuator.get_NowExecutiveData() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.NowParameterListGet">
            <summary>设置 CaseActionActuator.get_NowParameterList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.NowStaticDataListGet">
            <summary>设置 CaseActionActuator.get_NowStaticDataList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.NowStaticDataSouceListGet">
            <summary>设置 CaseActionActuator.get_NowStaticDataSouceList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.OnActuatorStateChangedAddCaseActionActuatordelegateGetActuatorStateEventHandler">
            <summary>设置 CaseActionActuator.add_OnActuatorStateChanged(delegateGetActuatorStateEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.OnActuatorStateChangedRemoveCaseActionActuatordelegateGetActuatorStateEventHandler">
            <summary>设置 CaseActionActuator.remove_OnActuatorStateChanged(delegateGetActuatorStateEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.OnExecutiveResultAddCaseActionActuatordelegateGetExecutiveResultEventHandler">
            <summary>设置 CaseActionActuator.add_OnExecutiveResult(delegateGetExecutiveResultEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.OnExecutiveResultRemoveCaseActionActuatordelegateGetExecutiveResultEventHandler">
            <summary>设置 CaseActionActuator.remove_OnExecutiveResult(delegateGetExecutiveResultEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.OnGetActionErrorAdddelegateGetExecutiveData">
            <summary>设置 CaseActionActuator.add_OnGetActionError(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.OnGetActionErrorRemovedelegateGetExecutiveData">
            <summary>设置 CaseActionActuator.remove_OnGetActionError(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.OnGetExecutiveDataAdddelegateGetExecutiveData">
            <summary>设置 CaseActionActuator.add_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.OnGetExecutiveDataRemovedelegateGetExecutiveData">
            <summary>设置 CaseActionActuator.remove_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.PauseCaseScript">
            <summary>设置 CaseActionActuator.PauseCaseScript() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.ResetErrorInfo">
            <summary>设置 CaseActionActuator.ResetErrorInfo() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.ResetNowExecutiveData">
            <summary>设置 CaseActionActuator.ResetNowExecutiveData() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.RunActuatorStaticDataCollectionGet">
            <summary>设置 CaseActionActuator.get_RunActuatorStaticDataCollection() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.RunCaseScriptCaseCell">
            <summary>设置 CaseActionActuator.RunCaseScript(CaseCell yourStartNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.RunCellProjctCollectionGet">
            <summary>设置 CaseActionActuator.get_RunCellProjctCollection() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.RunProgressGet">
            <summary>设置 CaseActionActuator.get_RunProgress() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.RunTimeCaseDictionaryGet">
            <summary>设置 CaseActionActuator.get_RunTimeCaseDictionary() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.RunstateGet">
            <summary>设置 CaseActionActuator.get_Runstate() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.SetAndSaveNowActionErrorString">
            <summary>设置 CaseActionActuator.SetAndSaveNowActionError(String yourContent) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.SetAndSaveNowExecutiveDataString">
            <summary>设置 CaseActionActuator.SetAndSaveNowExecutiveData(String yourContent) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.SetCaseRunTimeDictionaryOfInt32DictionaryOfInt32CaseCellProjctCollection">
            <summary>设置 CaseActionActuator.SetCaseRunTime(Dictionary`2&lt;Int32,Dictionary`2&lt;Int32,CaseCell&gt;&gt; yourCaseDictionary, ProjctCollection yourProjctCollection) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.SetNowActionErrorString">
            <summary>设置 CaseActionActuator.SetNowActionError(String yourContent) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.SetNowExecutiveDataString">
            <summary>设置 CaseActionActuator.SetNowExecutiveData(String yourContent) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.SetRunStateCaseActuatorState">
            <summary>设置 CaseActionActuator.SetRunState(CaseActuatorState yourStae) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.StopCaseScript">
            <summary>设置 CaseActionActuator.StopCaseScript() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.TryNextCaseScriptCaseCell">
            <summary>设置 CaseActionActuator.TryNextCaseScript(CaseCell yourNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.TryNowCaseScriptCaseCell">
            <summary>设置 CaseActionActuator.TryNowCaseScript(CaseCell yourNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.UpdataRunTimeCaseDictionaryDictionaryOfInt32DictionaryOfInt32CaseCell">
            <summary>设置 CaseActionActuator.UpdataRunTimeCaseDictionary(Dictionary`2&lt;Int32,Dictionary`2&lt;Int32,CaseCell&gt;&gt; yourCaseDictionary) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.caseRunTime_OnLoopChangeEventCaseCellString">
            <summary>设置 CaseActionActuator.caseRunTime_OnLoopChangeEvent(CaseCell yourTarget, String yourMessage) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.caseRunTime_OnQueueChangeEventCaseCellString">
            <summary>设置 CaseActionActuator.caseRunTime_OnQueueChangeEvent(CaseCell yourTarget, String yourMessage) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.AddExecutionDeviceStringIConnectExecutiveData">
            <summary>设置 CaseActionActuator.AddExecutionDevice(String yourDeviceName, IConnectExecutiveData yourDeviceConnectInfo) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.AddExecutionResultmyExecutionDeviceResult">
            <summary>设置 CaseActionActuator.AddExecutionResult(myExecutionDeviceResult yourExecutionResult) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.AddRunActuatorParameterStringString">
            <summary>设置 CaseActionActuator.AddRunActuatorParameter(String yourParameterName, String yourParameterVaule) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.ClearInvalidThreadList">
            <summary>设置 CaseActionActuator.ClearInvalidThreadList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.Clone">
            <summary>设置 CaseActionActuator.Clone() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.ConnectExecutionDevice">
            <summary>设置 CaseActionActuator.ConnectExecutionDevice() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.CreateNewActuatorTask">
            <summary>设置 CaseActionActuator.CreateNewActuatorTask() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.CreateNewActuatorTryCaseCell">
            <summary>设置 CaseActionActuator.CreateNewActuatorTry(CaseCell yourTryNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.DisconnectExecutionDevice">
            <summary>设置 CaseActionActuator.DisconnectExecutionDevice() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.Dispose">
            <summary>设置 CaseActionActuator.Dispose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.DisposeBoolean">
            <summary>设置 CaseActionActuator.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.ErrorInfoGet">
            <summary>设置 CaseActionActuator.get_ErrorInfo() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.ExecutiveActuatorTask">
            <summary>设置 CaseActionActuator.ExecutiveActuatorTask() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.ExecutiveActuatorTryObject">
            <summary>设置 CaseActionActuator.ExecutiveActuatorTry(Object yourTryNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.ExecutiveThinkTimeGet">
            <summary>设置 CaseActionActuator.get_ExecutiveThinkTime() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.ExecutiveThinkTimeSetInt32">
            <summary>设置 CaseActionActuator.set_ExecutiveThinkTime(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.IsActionActuatorCanRunCaseCell">
            <summary>设置 CaseActionActuator.IsActionActuatorCanRun(CaseCell yourStartNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.IsActuatorDataFillGet">
            <summary>设置 CaseActionActuator.get_IsActuatorDataFill() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.KillAll">
            <summary>设置 CaseActionActuator.KillAll() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.LoadScriptRunTimeXmlNode">
            <summary>设置 CaseActionActuator.LoadScriptRunTime(XmlNode sourceNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.MyNameGet">
            <summary>设置 CaseActionActuator.get_MyName() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.MyNameSetString">
            <summary>设置 CaseActionActuator.set_MyName(String value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.NowExecutionDeviceListGet">
            <summary>设置 CaseActionActuator.get_NowExecutionDeviceList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.NowExecutionResultListGet">
            <summary>设置 CaseActionActuator.get_NowExecutionResultList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.NowExecutiveDataGet">
            <summary>设置 CaseActionActuator.get_NowExecutiveData() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.NowParameterListGet">
            <summary>设置 CaseActionActuator.get_NowParameterList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.NowStaticDataListGet">
            <summary>设置 CaseActionActuator.get_NowStaticDataList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.NowStaticDataSouceListGet">
            <summary>设置 CaseActionActuator.get_NowStaticDataSouceList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.OnActuatorStateChangedAddCaseActionActuatordelegateGetActuatorStateEventHandler">
            <summary>设置 CaseActionActuator.add_OnActuatorStateChanged(delegateGetActuatorStateEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.OnActuatorStateChangedRemoveCaseActionActuatordelegateGetActuatorStateEventHandler">
            <summary>设置 CaseActionActuator.remove_OnActuatorStateChanged(delegateGetActuatorStateEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.OnExecutiveResultAddCaseActionActuatordelegateGetExecutiveResultEventHandler">
            <summary>设置 CaseActionActuator.add_OnExecutiveResult(delegateGetExecutiveResultEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.OnExecutiveResultRemoveCaseActionActuatordelegateGetExecutiveResultEventHandler">
            <summary>设置 CaseActionActuator.remove_OnExecutiveResult(delegateGetExecutiveResultEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.OnGetActionErrorAdddelegateGetExecutiveData">
            <summary>设置 CaseActionActuator.add_OnGetActionError(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.OnGetActionErrorRemovedelegateGetExecutiveData">
            <summary>设置 CaseActionActuator.remove_OnGetActionError(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.OnGetExecutiveDataAdddelegateGetExecutiveData">
            <summary>设置 CaseActionActuator.add_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.OnGetExecutiveDataRemovedelegateGetExecutiveData">
            <summary>设置 CaseActionActuator.remove_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.PauseCaseScript">
            <summary>设置 CaseActionActuator.PauseCaseScript() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.ResetErrorInfo">
            <summary>设置 CaseActionActuator.ResetErrorInfo() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.ResetNowExecutiveData">
            <summary>设置 CaseActionActuator.ResetNowExecutiveData() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.RunActuatorStaticDataCollectionGet">
            <summary>设置 CaseActionActuator.get_RunActuatorStaticDataCollection() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.RunCaseScriptCaseCell">
            <summary>设置 CaseActionActuator.RunCaseScript(CaseCell yourStartNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.RunCellProjctCollectionGet">
            <summary>设置 CaseActionActuator.get_RunCellProjctCollection() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.RunProgressGet">
            <summary>设置 CaseActionActuator.get_RunProgress() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.RunTimeCaseDictionaryGet">
            <summary>设置 CaseActionActuator.get_RunTimeCaseDictionary() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.RunstateGet">
            <summary>设置 CaseActionActuator.get_Runstate() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.SetAndSaveNowActionErrorString">
            <summary>设置 CaseActionActuator.SetAndSaveNowActionError(String yourContent) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.SetAndSaveNowExecutiveDataString">
            <summary>设置 CaseActionActuator.SetAndSaveNowExecutiveData(String yourContent) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.SetCaseRunTimeDictionaryOfInt32DictionaryOfInt32CaseCellProjctCollection">
            <summary>设置 CaseActionActuator.SetCaseRunTime(Dictionary`2&lt;Int32,Dictionary`2&lt;Int32,CaseCell&gt;&gt; yourCaseDictionary, ProjctCollection yourProjctCollection) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.SetNowActionErrorString">
            <summary>设置 CaseActionActuator.SetNowActionError(String yourContent) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.SetNowExecutiveDataString">
            <summary>设置 CaseActionActuator.SetNowExecutiveData(String yourContent) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.SetRunStateCaseActuatorState">
            <summary>设置 CaseActionActuator.SetRunState(CaseActuatorState yourStae) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.StopCaseScript">
            <summary>设置 CaseActionActuator.StopCaseScript() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.TryNextCaseScriptCaseCell">
            <summary>设置 CaseActionActuator.TryNextCaseScript(CaseCell yourNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.TryNowCaseScriptCaseCell">
            <summary>设置 CaseActionActuator.TryNowCaseScript(CaseCell yourNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.UpdataRunTimeCaseDictionaryDictionaryOfInt32DictionaryOfInt32CaseCell">
            <summary>设置 CaseActionActuator.UpdataRunTimeCaseDictionary(Dictionary`2&lt;Int32,Dictionary`2&lt;Int32,CaseCell&gt;&gt; yourCaseDictionary) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.caseRunTime_OnLoopChangeEventCaseCellString">
            <summary>设置 CaseActionActuator.caseRunTime_OnLoopChangeEvent(CaseCell yourTarget, String yourMessage) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.caseRunTime_OnQueueChangeEventCaseCellString">
            <summary>设置 CaseActionActuator.caseRunTime_OnQueueChangeEvent(CaseCell yourTarget, String yourMessage) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimCaseDataSource">
            <summary>CaseExecutiveActuator.CaseDataSource 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseDataSource.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseDataSource.#ctor(CaseExecutiveActuator.CaseDataSource)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseDataSource.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseDataSource.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseDataSource.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseDataSource.Constructor">
            <summary>设置 CaseDataSource.CaseDataSource() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseDataSource.GetDataInt32Int32">
            <summary>设置 CaseDataSource.GetData(Int32 rowIndex, Int32 columnIndex) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseDataSource.SetDataInt32Int32">
            <summary>设置 CaseDataSource.SetData(Int32 rowIndex, Int32 columnIndex) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimCaseDataSource.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseDataSource.AllInstances.GetDataInt32Int32">
            <summary>设置 CaseDataSource.GetData(Int32 rowIndex, Int32 columnIndex) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseDataSource.AllInstances.SetDataInt32Int32">
            <summary>设置 CaseDataSource.SetData(Int32 rowIndex, Int32 columnIndex) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp">
            <summary>CaseExecutiveActuator.CaseProtocolExecutionForHttp 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.#ctor(CaseExecutiveActuator.CaseProtocolExecutionForHttp)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.Bind(CaseExecutiveActuator.ICaseExecutionDevice)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.Bind(System.ICloneable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.Clone">
            <summary>设置 CaseProtocolExecutionForHttp.Clone() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.ConstructormyConnectForHttp">
            <summary>设置 CaseProtocolExecutionForHttp.CaseProtocolExecutionForHttp(myConnectForHttp yourConnectInfo) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.OnGetExecutiveDataAdddelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForHttp.add_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.OnGetExecutiveDataRemovedelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForHttp.remove_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.executionDeviceClose">
            <summary>设置 CaseProtocolExecutionForHttp.executionDeviceClose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.executionDeviceConnect">
            <summary>设置 CaseProtocolExecutionForHttp.executionDeviceConnect() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.executionDeviceRunICaseExecutionContentdelegateGetExecutiveDataStringActuatorStaticDataCollectionInt32">
            <summary>设置 CaseProtocolExecutionForHttp.executionDeviceRun(ICaseExecutionContent yourExecutionContent, delegateGetExecutiveData yourExecutiveDelegate, String sender, ActuatorStaticDataCollection yourActuatorStaticDataCollection, Int32 caseId) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.getProtocolTypeGet">
            <summary>设置 CaseProtocolExecutionForHttp.get_getProtocolType() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.isDeviceConnectGet">
            <summary>设置 CaseProtocolExecutionForHttp.get_isDeviceConnect() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.AllInstances.Clone">
            <summary>设置 CaseProtocolExecutionForHttp.Clone() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.AllInstances.OnGetExecutiveDataAdddelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForHttp.add_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.AllInstances.OnGetExecutiveDataRemovedelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForHttp.remove_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.AllInstances.executionDeviceClose">
            <summary>设置 CaseProtocolExecutionForHttp.executionDeviceClose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.AllInstances.executionDeviceConnect">
            <summary>设置 CaseProtocolExecutionForHttp.executionDeviceConnect() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.AllInstances.executionDeviceRunICaseExecutionContentdelegateGetExecutiveDataStringActuatorStaticDataCollectionInt32">
            <summary>设置 CaseProtocolExecutionForHttp.executionDeviceRun(ICaseExecutionContent yourExecutionContent, delegateGetExecutiveData yourExecutiveDelegate, String sender, ActuatorStaticDataCollection yourActuatorStaticDataCollection, Int32 caseId) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.AllInstances.getProtocolTypeGet">
            <summary>设置 CaseProtocolExecutionForHttp.get_getProtocolType() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.AllInstances.isDeviceConnectGet">
            <summary>设置 CaseProtocolExecutionForHttp.get_isDeviceConnect() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http">
            <summary>CaseExecutiveActuator.CaseProtocolExecutionForVanelife_http 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.#ctor(CaseExecutiveActuator.CaseProtocolExecutionForVanelife_http)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.Bind(CaseExecutiveActuator.ICaseExecutionDevice)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.Bind(System.ICloneable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.Clone">
            <summary>设置 CaseProtocolExecutionForVanelife_http.Clone() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.ConstructormyConnectForVanelife_http">
            <summary>设置 CaseProtocolExecutionForVanelife_http.CaseProtocolExecutionForVanelife_http(myConnectForVanelife_http yourConnectInfo) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.CreatVanelifeSendDataString">
            <summary>设置 CaseProtocolExecutionForVanelife_http.CreatVanelifeSendData(String testData) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.OnGetExecutiveDataAdddelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForVanelife_http.add_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.OnGetExecutiveDataRemovedelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForVanelife_http.remove_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.executionDeviceClose">
            <summary>设置 CaseProtocolExecutionForVanelife_http.executionDeviceClose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.executionDeviceConnect">
            <summary>设置 CaseProtocolExecutionForVanelife_http.executionDeviceConnect() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.executionDeviceRunICaseExecutionContentdelegateGetExecutiveDataStringActuatorStaticDataCollectionInt32">
            <summary>设置 CaseProtocolExecutionForVanelife_http.executionDeviceRun(ICaseExecutionContent yourExecutionContent, delegateGetExecutiveData yourExecutiveDelegate, String sender, ActuatorStaticDataCollection yourActuatorStaticDataCollection, Int32 caseId) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.getProtocolTypeGet">
            <summary>设置 CaseProtocolExecutionForVanelife_http.get_getProtocolType() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.isDeviceConnectGet">
            <summary>设置 CaseProtocolExecutionForVanelife_http.get_isDeviceConnect() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.AllInstances.Clone">
            <summary>设置 CaseProtocolExecutionForVanelife_http.Clone() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.AllInstances.CreatVanelifeSendDataString">
            <summary>设置 CaseProtocolExecutionForVanelife_http.CreatVanelifeSendData(String testData) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.AllInstances.OnGetExecutiveDataAdddelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForVanelife_http.add_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.AllInstances.OnGetExecutiveDataRemovedelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForVanelife_http.remove_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.AllInstances.executionDeviceClose">
            <summary>设置 CaseProtocolExecutionForVanelife_http.executionDeviceClose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.AllInstances.executionDeviceConnect">
            <summary>设置 CaseProtocolExecutionForVanelife_http.executionDeviceConnect() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.AllInstances.executionDeviceRunICaseExecutionContentdelegateGetExecutiveDataStringActuatorStaticDataCollectionInt32">
            <summary>设置 CaseProtocolExecutionForVanelife_http.executionDeviceRun(ICaseExecutionContent yourExecutionContent, delegateGetExecutiveData yourExecutiveDelegate, String sender, ActuatorStaticDataCollection yourActuatorStaticDataCollection, Int32 caseId) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.AllInstances.getProtocolTypeGet">
            <summary>设置 CaseProtocolExecutionForVanelife_http.get_getProtocolType() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.AllInstances.isDeviceConnectGet">
            <summary>设置 CaseProtocolExecutionForVanelife_http.get_isDeviceConnect() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimCaseTool">
            <summary>CaseExecutiveActuator.CaseTool 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseTool.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseTool.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseTool.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseTool.getCaseRunDataOf1XmlNode``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Xml.XmlNode,CaseExecutiveActuator.myRunCaseData{``0}})">
            <summary>设置 CaseTool.getCaseRunData(XmlNode sourceNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.CheckBackDataStringStringCaseExpectType">
            <summary>设置 CaseTool.CheckBackData(String BackData, String ExpectData, CaseExpectType method) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.CheckBackDataStringStringString">
            <summary>设置 CaseTool.CheckBackData(String BackData, String ExpectData, String method) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.CheckCaseXmlNodeStringStringArray">
            <summary>设置 CaseTool.CheckCase(XmlNode sourceNode, String targetKey, String[] targetValue) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.GetCurrentParametersDataStringDictionaryOfStringStringDictionaryOfStringIRunTimeStaticDataNameValueCollectionStringOut">
            <summary>设置 CaseTool.GetCurrentParametersData(String yourSourceData, Dictionary`2&lt;String,String&gt; yourParameterList, Dictionary`2&lt;String,IRunTimeStaticData&gt; yourStaticDataList, NameValueCollection yourDataResultCollection, String&amp; errorMessage) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.GetCurrentParametersDataStringStringActuatorStaticDataCollectionNameValueCollectionStringOut">
            <summary>设置 CaseTool.GetCurrentParametersData(String yourSourceData, String splitStr, ActuatorStaticDataCollection yourActuatorStaticDataCollection, NameValueCollection yourDataResultCollection, String&amp; errorMessage) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.GetFullPathString">
            <summary>设置 CaseTool.GetFullPath(String path) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.GetJTokenValueExJTokenString">
            <summary>设置 CaseTool.GetJTokenValueEx(JToken yourJToken, String yourKey) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.GetJTokenValueJTokenString">
            <summary>设置 CaseTool.GetJTokenValue(JToken yourJToken, String yourKey) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.GetStrPickDataStringStringOutInt32Out">
            <summary>设置 CaseTool.GetStrPickData(String yourSouce, String&amp; yourTarget, Int32&amp; yourStrLen) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.PickJsonParameterStringString">
            <summary>设置 CaseTool.PickJsonParameter(String yourTarget, String yourSouce) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.PickStrParameterStringInt32String">
            <summary>设置 CaseTool.PickStrParameter(String yourTarget, Int32 yourStrLen, String yourSouce) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.PickXmlParameterStringString">
            <summary>设置 CaseTool.PickXmlParameter(String yourTarget, String yourSouce) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.StaticConstructor">
            <summary>设置 CaseTool.CaseTool() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.TryGetParametersAdditionDataStringStringOut">
            <summary>设置 CaseTool.TryGetParametersAdditionData(String souceData, String&amp; additionData) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.getCaseProtocolXmlNode">
            <summary>设置 CaseTool.getCaseProtocol(XmlNode sourceNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.getHttpConfigXmlNodeDictionaryOfStringString">
            <summary>设置 CaseTool.getHttpConfig(XmlNode sourceNode, Dictionary`2&lt;String,String&gt; yourRunParameter) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.getTargetCaseIDStringInt32OutInt32Out">
            <summary>设置 CaseTool.getTargetCaseID(String yourData, Int32&amp; PorjectID, Int32&amp; CaseID) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.getXmlAttributeVauleExXmlNodeString">
            <summary>设置 CaseTool.getXmlAttributeVauleEx(XmlNode sourceNode, String tagAttribute) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.getXmlAttributeVauleXmlNodeString">
            <summary>设置 CaseTool.getXmlAttributeVaule(XmlNode sourceNode, String tagAttribute) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.getXmlInnerVauleExXmlNodeString">
            <summary>设置 CaseTool.getXmlInnerVauleEx(XmlNode sourceNode, String tagName) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.getXmlInnerVauleXmlNodeString">
            <summary>设置 CaseTool.getXmlInnerVaule(XmlNode sourceNode, String tagName) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.getXmlParametContentXmlNode">
            <summary>设置 CaseTool.getXmlParametContent(XmlNode sourceNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.getXmlParametContentXmlNodeString">
            <summary>设置 CaseTool.getXmlParametContent(XmlNode sourceNode, String tagName) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.myConvertNewUrlStringDictionaryOfStringStringStringRef">
            <summary>设置 CaseTool.myConvertNewUrl(String yourNowStr, Dictionary`2&lt;String,String&gt; yourRunParameter, String&amp; errorMes) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimHttpAisleConfig">
            <summary>CaseExecutiveActuator.HttpAisleConfig 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimHttpAisleConfig.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimHttpAisleConfig.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimHttpAisleConfig.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimHttpAisleConfig.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimHttpAisleConfig.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimHttpMultipart">
            <summary>CaseExecutiveActuator.HttpMultipart 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimHttpMultipart.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimHttpMultipart.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimHttpMultipart.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimHttpMultipart.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimHttpMultipart.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine">
            <summary>CaseExecutiveActuator.MyCaseDataTypeEngine 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.#ctor(CaseExecutiveActuator.MyCaseDataTypeEngine)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.Constructor">
            <summary>设置 MyCaseDataTypeEngine.MyCaseDataTypeEngine() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.GetCsvStaticDataSourceMyStaticDataSourceCsvOutStringOutString">
            <summary>设置 MyCaseDataTypeEngine.GetCsvStaticDataSource(MyStaticDataSourceCsv&amp; yourStaticData, String&amp; errorMes, String yourFormatData) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.GetIndexStaticDataMyStaticDataIndexOutStringOutString">
            <summary>设置 MyCaseDataTypeEngine.GetIndexStaticData(MyStaticDataIndex&amp; yourStaticData, String&amp; errorMes, String yourFormatData) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.GetListStaticDataMyStaticDataListOutStringOutString">
            <summary>设置 MyCaseDataTypeEngine.GetListStaticData(MyStaticDataList&amp; yourStaticData, String&amp; errorMes, String yourFormatData) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.GetLongStaticDataMyStaticDataLongOutStringOutString">
            <summary>设置 MyCaseDataTypeEngine.GetLongStaticData(MyStaticDataLong&amp; yourStaticData, String&amp; errorMes, String yourFormatData) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.GetRandomStaticDataMyStaticDataRandomStrOutStringOutString">
            <summary>设置 MyCaseDataTypeEngine.GetRandomStaticData(MyStaticDataRandomStr&amp; yourStaticData, String&amp; errorMes, String yourFormatData) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.GetTimeStaticDataMyStaticDataNowTimeOutString">
            <summary>设置 MyCaseDataTypeEngine.GetTimeStaticData(MyStaticDataNowTime&amp; yourStaticData, String yourFormatData) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine">
            <summary>CaseExecutiveActuator.MyCaseProtocolEngine 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine.#ctor(CaseExecutiveActuator.MyCaseProtocolEngine)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine.Constructor">
            <summary>设置 MyCaseProtocolEngine.MyCaseProtocolEngine() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine.ShimhttpEngine">
            <summary>CaseExecutiveActuator.MyCaseProtocolEngine+httpEngine 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine.ShimhttpEngine.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine.ShimhttpEngine.#ctor(CaseExecutiveActuator.MyCaseProtocolEngine.httpEngine)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine.ShimhttpEngine.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine.ShimhttpEngine.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine.ShimhttpEngine.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine.ShimhttpEngine.Constructor">
            <summary>设置 httpEngine.httpEngine() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine.ShimhttpEngine.getRunContentXmlNode">
            <summary>设置 httpEngine.getRunContent(XmlNode yourContentNode) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine.ShimhttpEngine.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine.Shimvanelife_httpEngine">
            <summary>CaseExecutiveActuator.MyCaseProtocolEngine+vanelife_httpEngine 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine.Shimvanelife_httpEngine.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine.Shimvanelife_httpEngine.#ctor(CaseExecutiveActuator.MyCaseProtocolEngine.vanelife_httpEngine)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine.Shimvanelife_httpEngine.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine.Shimvanelife_httpEngine.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine.Shimvanelife_httpEngine.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine.Shimvanelife_httpEngine.Constructor">
            <summary>设置 vanelife_httpEngine.vanelife_httpEngine() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine.Shimvanelife_httpEngine.getRunContentXmlNode">
            <summary>设置 vanelife_httpEngine.getRunContent(XmlNode yourContentNode) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyCaseProtocolEngine.Shimvanelife_httpEngine.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyConfiguration">
            <summary>CaseExecutiveActuator.MyConfiguration 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyConfiguration.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyConfiguration.#ctor(CaseExecutiveActuator.MyConfiguration)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyConfiguration.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyConfiguration.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConfiguration.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConfiguration.Constructor">
            <summary>设置 MyConfiguration.MyConfiguration() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConfiguration.StaticConstructor">
            <summary>设置 MyConfiguration.MyConfiguration() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyConfiguration.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyExtensionMethods">
            <summary>CaseExecutiveActuator.MyExtensionMethods 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyExtensionMethods.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyExtensionMethods.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyExtensionMethods.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyExtensionMethods.MyAddOf1DictionaryOfStringM0StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Collections.Generic.Dictionary{System.String,``0},System.String,``0})">
            <summary>设置 MyExtensionMethods.MyAdd(Dictionary`2&lt;String,!!0&gt; dc, String yourKey, !!0 yourValue) 的 填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyExtensionMethods.MyCloneOf2DictionaryOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1}})">
            <summary>设置 MyExtensionMethods.MyClone(Dictionary`2&lt;!!0,!!1&gt; dc) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyExtensionMethods.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyExtensionMethods.MyAddDictionaryOfStringICaseExecutionDeviceStringICaseExecutionDevice">
            <summary>设置 MyExtensionMethods.MyAdd(Dictionary`2&lt;String,ICaseExecutionDevice&gt; dc, String yourKey, ICaseExecutionDevice yourValue) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyExtensionMethods.MyAddDictionaryOfStringIRunTimeStaticDataStringIRunTimeStaticData">
            <summary>设置 MyExtensionMethods.MyAdd(Dictionary`2&lt;String,IRunTimeStaticData&gt; dc, String yourKey, IRunTimeStaticData yourValue) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyExtensionMethods.MyCloneDictionaryOfStringICloneable">
            <summary>设置 MyExtensionMethods.MyClone(Dictionary`2&lt;String,ICloneable&gt; dc) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyExtensionMethods.MyCloneListOfIRunTimeStaticData">
            <summary>设置 MyExtensionMethods.MyClone(List`1&lt;IRunTimeStaticData&gt; lt) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataIndex">
            <summary>CaseExecutiveActuator.MyStaticDataIndex 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataIndex.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataIndex.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataIndex.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyStaticDataIndex.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataIndex.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataList">
            <summary>CaseExecutiveActuator.MyStaticDataList 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataList.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataList.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataList.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyStaticDataList.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataList.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataLong">
            <summary>CaseExecutiveActuator.MyStaticDataLong 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataLong.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataLong.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataLong.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyStaticDataLong.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataLong.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataNowTime">
            <summary>CaseExecutiveActuator.MyStaticDataNowTime 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataNowTime.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataNowTime.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataNowTime.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyStaticDataNowTime.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataNowTime.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataRandomStr">
            <summary>CaseExecutiveActuator.MyStaticDataRandomStr 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataRandomStr.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataRandomStr.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataRandomStr.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyStaticDataRandomStr.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataRandomStr.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataSourceCsv">
            <summary>CaseExecutiveActuator.MyStaticDataSourceCsv 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataSourceCsv.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataSourceCsv.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataSourceCsv.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyStaticDataSourceCsv.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataSourceCsv.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimParameterSave">
            <summary>CaseExecutiveActuator.ParameterSave 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimParameterSave.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimParameterSave.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimParameterSave.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimParameterSave.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimParameterSave.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimParameterSave_old">
            <summary>CaseExecutiveActuator.ParameterSave_old 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimParameterSave_old.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimParameterSave_old.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimParameterSave_old.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimParameterSave_old.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimParameterSave_old.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimcaseActionDescription">
            <summary>CaseExecutiveActuator.caseActionDescription 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimcaseActionDescription.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimcaseActionDescription.#ctor(CaseExecutiveActuator.caseActionDescription)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimcaseActionDescription.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimcaseActionDescription.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimcaseActionDescription.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimcaseActionDescription.ConstructorCaseActionString">
            <summary>设置 caseActionDescription.caseActionDescription(CaseAction yourCaseAction, String yourInfo) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimcaseActionDescription.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimcaseParameterizationContent">
            <summary>CaseExecutiveActuator.caseParameterizationContent 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimcaseParameterizationContent.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimcaseParameterizationContent.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimcaseParameterizationContent.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimcaseParameterizationContent.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimcaseParameterizationContent.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyAutoHttpTest">
            <summary>CaseExecutiveActuator.myAutoHttpTest 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyAutoHttpTest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyAutoHttpTest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyAutoHttpTest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyAutoHttpTest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyAutoHttpTest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyBasicHttpExecutionContent">
            <summary>CaseExecutiveActuator.myBasicHttpExecutionContent 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyBasicHttpExecutionContent.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyBasicHttpExecutionContent.#ctor(CaseExecutiveActuator.myBasicHttpExecutionContent)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyBasicHttpExecutionContent.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyBasicHttpExecutionContent.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyBasicHttpExecutionContent.Bind(CaseExecutiveActuator.ICaseExecutionContent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyBasicHttpExecutionContent.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyBasicHttpExecutionContent.Constructor">
            <summary>设置 myBasicHttpExecutionContent.myBasicHttpExecutionContent() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyBasicHttpExecutionContent.myCaseActuatorGet">
            <summary>设置 myBasicHttpExecutionContent.get_myCaseActuator() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyBasicHttpExecutionContent.myCaseProtocolGet">
            <summary>设置 myBasicHttpExecutionContent.get_myCaseProtocol() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyBasicHttpExecutionContent.myErrorMessageGet">
            <summary>设置 myBasicHttpExecutionContent.get_myErrorMessage() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyBasicHttpExecutionContent.myExecutionContentGet">
            <summary>设置 myBasicHttpExecutionContent.get_myExecutionContent() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyBasicHttpExecutionContent.myExecutionTargetGet">
            <summary>设置 myBasicHttpExecutionContent.get_myExecutionTarget() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyBasicHttpExecutionContent.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyBasicHttpExecutionContent.AllInstances.myCaseActuatorGet">
            <summary>设置 myBasicHttpExecutionContent.get_myCaseActuator() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyBasicHttpExecutionContent.AllInstances.myCaseProtocolGet">
            <summary>设置 myBasicHttpExecutionContent.get_myCaseProtocol() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyBasicHttpExecutionContent.AllInstances.myErrorMessageGet">
            <summary>设置 myBasicHttpExecutionContent.get_myErrorMessage() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyBasicHttpExecutionContent.AllInstances.myExecutionContentGet">
            <summary>设置 myBasicHttpExecutionContent.get_myExecutionContent() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyBasicHttpExecutionContent.AllInstances.myExecutionTargetGet">
            <summary>设置 myBasicHttpExecutionContent.get_myExecutionTarget() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyCaseAttribute">
            <summary>CaseExecutiveActuator.myCaseAttribute 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyCaseAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyCaseAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyCaseAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyCaseAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyCaseLaodInfo">
            <summary>CaseExecutiveActuator.myCaseLaodInfo 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyCaseLaodInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyCaseLaodInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyCaseLaodInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseLaodInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyCaseLaodInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime">
            <summary>CaseExecutiveActuator.myCaseRunTime 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.#ctor(CaseExecutiveActuator.myCaseRunTime)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.Constructor">
            <summary>设置 myCaseRunTime.myCaseRunTime() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.GetNowCountProgressGet">
            <summary>设置 myCaseRunTime.get_GetNowCountProgress() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.OnLoopChangeEventAdddelegateLoopChangeEventHandler">
            <summary>设置 myCaseRunTime.add_OnLoopChangeEvent(delegateLoopChangeEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.OnLoopChangeEventRemovedelegateLoopChangeEventHandler">
            <summary>设置 myCaseRunTime.remove_OnLoopChangeEvent(delegateLoopChangeEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.OnQueueChangeEventAdddelegateQueueChangeEventHandler">
            <summary>设置 myCaseRunTime.add_OnQueueChangeEvent(delegateQueueChangeEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.OnQueueChangeEventRemovedelegateQueueChangeEventHandler">
            <summary>设置 myCaseRunTime.remove_OnQueueChangeEvent(delegateQueueChangeEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.ReportQueueActionCaseCellString">
            <summary>设置 myCaseRunTime.ReportQueueAction(CaseCell yourTarget, String yourMessage) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.gotoMyCaseInt32Int32DictionaryOfInt32DictionaryOfInt32CaseCell">
            <summary>设置 myCaseRunTime.gotoMyCase(Int32 yourProjectId, Int32 yourCaseId, Dictionary`2&lt;Int32,Dictionary`2&lt;Int32,CaseCell&gt;&gt; myRunTimeCaseDictionary) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.nextCase">
            <summary>设置 myCaseRunTime.nextCase() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.readyStartCaseCell">
            <summary>设置 myCaseRunTime.readyStart(CaseCell yourStartCase) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.readyStartCaseCellBoolean">
            <summary>设置 myCaseRunTime.readyStart(CaseCell yourStartCase, Boolean yourIsThrough) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.AllInstances.GetNowCountProgressGet">
            <summary>设置 myCaseRunTime.get_GetNowCountProgress() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.AllInstances.OnLoopChangeEventAdddelegateLoopChangeEventHandler">
            <summary>设置 myCaseRunTime.add_OnLoopChangeEvent(delegateLoopChangeEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.AllInstances.OnLoopChangeEventRemovedelegateLoopChangeEventHandler">
            <summary>设置 myCaseRunTime.remove_OnLoopChangeEvent(delegateLoopChangeEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.AllInstances.OnQueueChangeEventAdddelegateQueueChangeEventHandler">
            <summary>设置 myCaseRunTime.add_OnQueueChangeEvent(delegateQueueChangeEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.AllInstances.OnQueueChangeEventRemovedelegateQueueChangeEventHandler">
            <summary>设置 myCaseRunTime.remove_OnQueueChangeEvent(delegateQueueChangeEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.AllInstances.ReportQueueActionCaseCellString">
            <summary>设置 myCaseRunTime.ReportQueueAction(CaseCell yourTarget, String yourMessage) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.AllInstances.gotoMyCaseInt32Int32DictionaryOfInt32DictionaryOfInt32CaseCell">
            <summary>设置 myCaseRunTime.gotoMyCase(Int32 yourProjectId, Int32 yourCaseId, Dictionary`2&lt;Int32,Dictionary`2&lt;Int32,CaseCell&gt;&gt; myRunTimeCaseDictionary) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.AllInstances.nextCase">
            <summary>设置 myCaseRunTime.nextCase() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.AllInstances.readyStartCaseCell">
            <summary>设置 myCaseRunTime.readyStart(CaseCell yourStartCase) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseRunTime.AllInstances.readyStartCaseCellBoolean">
            <summary>设置 myCaseRunTime.readyStart(CaseCell yourStartCase, Boolean yourIsThrough) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyCaseScriptAnalysisEngine">
            <summary>CaseExecutiveActuator.myCaseScriptAnalysisEngine 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyCaseScriptAnalysisEngine.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyCaseScriptAnalysisEngine.#ctor(CaseExecutiveActuator.myCaseScriptAnalysisEngine)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyCaseScriptAnalysisEngine.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyCaseScriptAnalysisEngine.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseScriptAnalysisEngine.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseScriptAnalysisEngine.Constructor">
            <summary>设置 myCaseScriptAnalysisEngine.myCaseScriptAnalysisEngine() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseScriptAnalysisEngine.getCaseLoadInfoXmlNode">
            <summary>设置 myCaseScriptAnalysisEngine.getCaseLoadInfo(XmlNode sourceNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseScriptAnalysisEngine.getCaseRunDataXmlNode">
            <summary>设置 myCaseScriptAnalysisEngine.getCaseRunData(XmlNode sourceNode) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyCaseScriptAnalysisEngine.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyCelerityCaseRunTime">
            <summary>CaseExecutiveActuator.myCelerityCaseRunTime 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyCelerityCaseRunTime.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyCelerityCaseRunTime.#ctor(CaseExecutiveActuator.myCelerityCaseRunTime)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyCelerityCaseRunTime.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyCelerityCaseRunTime.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCelerityCaseRunTime.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCelerityCaseRunTime.ConstructorDictionaryOfInt32DictionaryOfInt32TreeNode">
            <summary>设置 myCelerityCaseRunTime.myCelerityCaseRunTime(Dictionary`2&lt;Int32,Dictionary`2&lt;Int32,TreeNode&gt;&gt; yourCaseDictionary) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCelerityCaseRunTime.gotoMyCaseInt32Int32">
            <summary>设置 myCelerityCaseRunTime.gotoMyCase(Int32 yourProjectId, Int32 yourCaseId) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCelerityCaseRunTime.nextCase">
            <summary>设置 myCelerityCaseRunTime.nextCase() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCelerityCaseRunTime.readyStartTreeNode">
            <summary>设置 myCelerityCaseRunTime.readyStart(TreeNode yourStartCase) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCelerityCaseRunTime.readyStartTreeNodeBoolean">
            <summary>设置 myCelerityCaseRunTime.readyStart(TreeNode yourStartCase, Boolean yourIsThrough) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCelerityCaseRunTime.updataRunTimeCaseDictionaryDictionaryOfInt32DictionaryOfInt32TreeNode">
            <summary>设置 myCelerityCaseRunTime.updataRunTimeCaseDictionary(Dictionary`2&lt;Int32,Dictionary`2&lt;Int32,TreeNode&gt;&gt; yourCaseDictionary) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyCelerityCaseRunTime.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCelerityCaseRunTime.AllInstances.gotoMyCaseInt32Int32">
            <summary>设置 myCelerityCaseRunTime.gotoMyCase(Int32 yourProjectId, Int32 yourCaseId) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCelerityCaseRunTime.AllInstances.nextCase">
            <summary>设置 myCelerityCaseRunTime.nextCase() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCelerityCaseRunTime.AllInstances.readyStartTreeNode">
            <summary>设置 myCelerityCaseRunTime.readyStart(TreeNode yourStartCase) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCelerityCaseRunTime.AllInstances.readyStartTreeNodeBoolean">
            <summary>设置 myCelerityCaseRunTime.readyStart(TreeNode yourStartCase, Boolean yourIsThrough) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCelerityCaseRunTime.AllInstances.updataRunTimeCaseDictionaryDictionaryOfInt32DictionaryOfInt32TreeNode">
            <summary>设置 myCelerityCaseRunTime.updataRunTimeCaseDictionary(Dictionary`2&lt;Int32,Dictionary`2&lt;Int32,TreeNode&gt;&gt; yourCaseDictionary) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyConnectForHttp">
            <summary>CaseExecutiveActuator.myConnectForHttp 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForHttp.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForHttp.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForHttp.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyConnectForHttp.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyConnectForHttp.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyConnectForVanelife_http">
            <summary>CaseExecutiveActuator.myConnectForVanelife_http 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForVanelife_http.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForVanelife_http.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForVanelife_http.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyConnectForVanelife_http.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyConnectForVanelife_http.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyExecutionDeviceResult">
            <summary>CaseExecutiveActuator.myExecutionDeviceResult 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyExecutionDeviceResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyExecutionDeviceResult.#ctor(CaseExecutiveActuator.myExecutionDeviceResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyExecutionDeviceResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyExecutionDeviceResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyExecutionDeviceResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyExecutionDeviceResult.Constructor">
            <summary>设置 myExecutionDeviceResult.myExecutionDeviceResult() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyExecutionDeviceResult.ConstructorCaseProtocolStringStringString">
            <summary>设置 myExecutionDeviceResult.myExecutionDeviceResult(CaseProtocol yourCaseProtocol, String yourSpanTime, String yourStartTime, String yourBackContent) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyExecutionDeviceResult.ConstructorCaseProtocolStringStringStringString">
            <summary>设置 myExecutionDeviceResult.myExecutionDeviceResult(CaseProtocol yourCaseProtocol, String yourSpanTime, String yourStartTime, String yourBackContent, String yourAdditionalContent) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyExecutionDeviceResult.ConstructorInt32String">
            <summary>设置 myExecutionDeviceResult.myExecutionDeviceResult(Int32 yourCaseId, String yourAdditionalError) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyExecutionDeviceResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyExpectInfo">
            <summary>CaseExecutiveActuator.myExpectInfo 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyExpectInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyExpectInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyExpectInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyExpectInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyExpectInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyHttpBackData">
            <summary>CaseExecutiveActuator.myHttpBackData 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyHttpBackData.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyHttpBackData.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyHttpBackData.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyHttpBackData.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyHttpBackData.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyHttpConfig">
            <summary>CaseExecutiveActuator.myHttpConfig 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyHttpConfig.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyHttpConfig.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyHttpConfig.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyHttpConfig.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyHttpConfig.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyHttpExecutionContent">
            <summary>CaseExecutiveActuator.myHttpExecutionContent 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyHttpExecutionContent.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyHttpExecutionContent.#ctor(CaseExecutiveActuator.myHttpExecutionContent)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyHttpExecutionContent.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyHttpExecutionContent.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyHttpExecutionContent.Bind(CaseExecutiveActuator.ICaseExecutionContent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyHttpExecutionContent.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyHttpExecutionContent.Constructor">
            <summary>设置 myHttpExecutionContent.myHttpExecutionContent() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyHttpExecutionContent.ConstructorString">
            <summary>设置 myHttpExecutionContent.myHttpExecutionContent(String tempVal) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyHttpExecutionContent.myCaseActuatorGet">
            <summary>设置 myHttpExecutionContent.get_myCaseActuator() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyHttpExecutionContent.myCaseProtocolGet">
            <summary>设置 myHttpExecutionContent.get_myCaseProtocol() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyHttpExecutionContent.myErrorMessageGet">
            <summary>设置 myHttpExecutionContent.get_myErrorMessage() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyHttpExecutionContent.myExecutionContentGet">
            <summary>设置 myHttpExecutionContent.get_myExecutionContent() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyHttpExecutionContent.myExecutionTargetGet">
            <summary>设置 myHttpExecutionContent.get_myExecutionTarget() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyHttpExecutionContent.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyHttpExecutionContent.AllInstances.myCaseActuatorGet">
            <summary>设置 myHttpExecutionContent.get_myCaseActuator() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyHttpExecutionContent.AllInstances.myCaseProtocolGet">
            <summary>设置 myHttpExecutionContent.get_myCaseProtocol() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyHttpExecutionContent.AllInstances.myErrorMessageGet">
            <summary>设置 myHttpExecutionContent.get_myErrorMessage() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyHttpExecutionContent.AllInstances.myExecutionContentGet">
            <summary>设置 myHttpExecutionContent.get_myExecutionContent() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyHttpExecutionContent.AllInstances.myExecutionTargetGet">
            <summary>设置 myHttpExecutionContent.get_myExecutionTarget() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyLoopNodeInfo">
            <summary>CaseExecutiveActuator.myLoopNodeInfo 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyLoopNodeInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyLoopNodeInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyLoopNodeInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyLoopNodeInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyLoopNodeInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyNewTestInfo">
            <summary>CaseExecutiveActuator.myNewTestInfo 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyNewTestInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyNewTestInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyNewTestInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyNewTestInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyNewTestInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyRunCaseData`1">
            <summary>CaseExecutiveActuator.myRunCaseData`1 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyRunCaseData`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyRunCaseData`1.#ctor(CaseExecutiveActuator.myRunCaseData{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyRunCaseData`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyRunCaseData`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyRunCaseData`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyRunCaseData`1.Constructor">
            <summary>设置 myRunCaseData`1.myRunCaseData`1() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyRunCaseData`1.ConstructorT0Int32CaseProtocol">
            <summary>设置 myRunCaseData`1.myRunCaseData`1(!0 yourContent, Int32 yourId, CaseProtocol yourcontentProtocol) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyRunCaseData`1.ConstructorT0Int32CaseProtocolString">
            <summary>设置 myRunCaseData`1.myRunCaseData`1(!0 yourContent, Int32 yourId, CaseProtocol yourcontentProtocol, String yourErrorMessage) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyRunCaseData`1.addCaseActionCaseResultcaseActionDescription">
            <summary>设置 myRunCaseData`1.addCaseAction(CaseResult yourCaseResult, caseActionDescription yourDescription) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyRunCaseData`1.addErrorMessageString">
            <summary>设置 myRunCaseData`1.addErrorMessage(String yourErrorMessage) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyRunCaseData`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyRunCaseData`1.AllInstances.addCaseActionCaseResultcaseActionDescription">
            <summary>设置 myRunCaseData`1.addCaseAction(CaseResult yourCaseResult, caseActionDescription yourDescription) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyRunCaseData`1.AllInstances.addErrorMessageString">
            <summary>设置 myRunCaseData`1.addErrorMessage(String yourErrorMessage) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo">
            <summary>CaseExecutiveActuator.myTreeTagInfo 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo.#ctor(CaseExecutiveActuator.myTreeTagInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo.ConstructorCaseTypeXmlNode">
            <summary>设置 myTreeTagInfo.myTreeTagInfo(CaseType yourCaseType, XmlNode yourXmlNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo.ConstructorCaseTypeXmlNodemyRunCaseDataOfICaseExecutionContent">
            <summary>设置 myTreeTagInfo.myTreeTagInfo(CaseType yourCaseType, XmlNode yourXmlNode, myRunCaseData`1&lt;ICaseExecutionContent&gt; yourCaseRunData) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo_">
            <summary>CaseExecutiveActuator.myTreeTagInfo_ 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo_.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo_.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo_.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo_.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo_.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyWebTool">
            <summary>CaseExecutiveActuator.myWebTool 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyWebTool.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyWebTool.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyWebTool.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpClient">
            <summary>CaseExecutiveActuator.myWebTool+HttpClient 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpClient.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpClient.#ctor(CaseExecutiveActuator.myWebTool.HttpClient)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpClient.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpClient.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpClient.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpClient.Constructor">
            <summary>设置 HttpClient.HttpClient() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpClient.HttpPostDataStringInt32StringStringBooleanStringStringmyExecutionDeviceResult">
            <summary>设置 HttpClient.HttpPostData(String url, Int32 timeOut, String name, String filename, Boolean isFile, String filePath, String bodyParameter, myExecutionDeviceResult myEdr) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpClient.SendDataSaveExStringStringStringListOfKeyValuePairOfStringStringmyExecutionDeviceResultString">
            <summary>设置 HttpClient.SendDataSaveEx(String url, String data, String method, List`1&lt;KeyValuePair`2&lt;String,String&gt;&gt; heads, myExecutionDeviceResult myEdr, String saveFileName) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpClient.SendDataSaveExStringStringStringmyExecutionDeviceResultString">
            <summary>设置 HttpClient.SendDataSaveEx(String url, String data, String method, myExecutionDeviceResult myEdr, String saveFileName) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpClient.SendDataStringStringStringListOfKeyValuePairOfStringStringmyExecutionDeviceResult">
            <summary>设置 HttpClient.SendData(String url, String data, String method, List`1&lt;KeyValuePair`2&lt;String,String&gt;&gt; heads, myExecutionDeviceResult myEdr) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpClient.SendDataStringStringStringListOfKeyValuePairOfStringStringmyExecutionDeviceResultString">
            <summary>设置 HttpClient.SendData(String url, String data, String method, List`1&lt;KeyValuePair`2&lt;String,String&gt;&gt; heads, myExecutionDeviceResult myEdr, String saveFileName) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpClient.SendDataStringStringStringmyExecutionDeviceResult">
            <summary>设置 HttpClient.SendData(String url, String data, String method, myExecutionDeviceResult myEdr) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpClient.SendDataStringStringStringmyExecutionDeviceResultString">
            <summary>设置 HttpClient.SendData(String url, String data, String method, myExecutionDeviceResult myEdr, String saveFileName) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpClient.StaticConstructor">
            <summary>设置 HttpClient.HttpClient() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpClient.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpHelper">
            <summary>CaseExecutiveActuator.myWebTool+HttpHelper 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpHelper.#ctor(CaseExecutiveActuator.myWebTool.HttpHelper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpHelper.AddHttpHeadsHttpWebRequestListOfKeyValuePairOfStringString">
            <summary>设置 HttpHelper.AddHttpHeads(HttpWebRequest httpWebRequest, List`1&lt;KeyValuePair`2&lt;String,String&gt;&gt; heads) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpHelper.AddHttpHeadsWebHeaderCollectionListOfKeyValuePairOfStringString">
            <summary>设置 HttpHelper.AddHttpHeads(WebHeaderCollection header, List`1&lt;KeyValuePair`2&lt;String,String&gt;&gt; heads) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpHelper.Constructor">
            <summary>设置 HttpHelper.HttpHelper() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpHelper.SetHeaderValueWebHeaderCollectionStringString">
            <summary>设置 HttpHelper.SetHeaderValue(WebHeaderCollection header, String name, String value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpHelper.StaticConstructor">
            <summary>设置 HttpHelper.HttpHelper() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpHelper._cctorb__0HttpWebRequestString">
            <summary>设置 HttpHelper.&lt;.cctor&gt;b__0(HttpWebRequest yourRequest, String yourHeadValue) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpHelper._cctorb__1HttpWebRequestString">
            <summary>设置 HttpHelper.&lt;.cctor&gt;b__1(HttpWebRequest yourRequest, String yourHeadValue) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpHelper._cctorb__2HttpWebRequestString">
            <summary>设置 HttpHelper.&lt;.cctor&gt;b__2(HttpWebRequest yourRequest, String yourHeadValue) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpHelper._cctorb__3HttpWebRequestString">
            <summary>设置 HttpHelper.&lt;.cctor&gt;b__3(HttpWebRequest yourRequest, String yourHeadValue) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpHelper._cctorb__4HttpWebRequestString">
            <summary>设置 HttpHelper.&lt;.cctor&gt;b__4(HttpWebRequest yourRequest, String yourHeadValue) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpHelper._cctorb__5HttpWebRequestString">
            <summary>设置 HttpHelper.&lt;.cctor&gt;b__5(HttpWebRequest yourRequest, String yourHeadValue) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpHelper._cctorb__6HttpWebRequestString">
            <summary>设置 HttpHelper.&lt;.cctor&gt;b__6(HttpWebRequest yourRequest, String yourHeadValue) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpHelper._cctorb__7HttpWebRequestString">
            <summary>设置 HttpHelper.&lt;.cctor&gt;b__7(HttpWebRequest yourRequest, String yourHeadValue) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpHelper._cctorb__8HttpWebRequestString">
            <summary>设置 HttpHelper.&lt;.cctor&gt;b__8(HttpWebRequest yourRequest, String yourHeadValue) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpHelper._cctorb__9HttpWebRequestString">
            <summary>设置 HttpHelper.&lt;.cctor&gt;b__9(HttpWebRequest yourRequest, String yourHeadValue) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimHttpHelper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimmyHttp">
            <summary>CaseExecutiveActuator.myWebTool+myHttp 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimmyHttp.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimmyHttp.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimmyHttp.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimmyHttp.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimmyHttp.HttpPostDataStringInt32StringStringBooleanStringString">
            <summary>设置 myHttp.HttpPostData(String url, Int32 timeOut, String name, String filename, Boolean isFile, String filePath, String bodyParameter) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimmyHttp.HttpPostDataStringInt32StringStringBooleanStringStringmyAutoHttpTestRef">
            <summary>设置 myHttp.HttpPostData(String url, Int32 timeOut, String name, String filename, Boolean isFile, String filePath, String bodyParameter, myAutoHttpTest&amp; myAht) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimmyHttp.SendDataSaveExStringStringStringmyAutoHttpTestRefString">
            <summary>设置 myHttp.SendDataSaveEx(String url, String data, String method, myAutoHttpTest&amp; myAht, String saveFileName) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimmyHttp.SendDataStringStringString">
            <summary>设置 myHttp.SendData(String url, String data, String method) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimmyHttp.SendDataStringStringStringListOfKeyValuePairOfStringString">
            <summary>设置 myHttp.SendData(String url, String data, String method, List`1&lt;KeyValuePair`2&lt;String,String&gt;&gt; heads) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimmyHttp.SendDataStringStringStringmyAutoHttpTestRef">
            <summary>设置 myHttp.SendData(String url, String data, String method, myAutoHttpTest&amp; myAht) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimmyHttp.SendDataStringStringStringmyAutoHttpTestRefString">
            <summary>设置 myHttp.SendData(String url, String data, String method, myAutoHttpTest&amp; myAht, String saveFileName) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyWebTool.ShimmyHttp.StaticConstructor">
            <summary>设置 myHttp.myHttp() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubActuatorStaticDataCollection">
            <summary>CaseExecutiveActuator.ActuatorStaticDataCollection 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubActuatorStaticDataCollection.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubActuatorStaticDataCollection.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,CaseExecutiveActuator.IRunTimeStaticData},System.Collections.Generic.Dictionary{System.String,CaseExecutiveActuator.IRunTimeDataSource})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubActuatorStaticDataCollection.InitializeStub">
            <summary>初始化 type StubActuatorStaticDataCollection 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubActuatorStaticDataCollection.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubActuatorStaticDataCollection.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubActuatorStaticDataCollection.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubCaseActionActuator">
            <summary>CaseExecutiveActuator.CaseActionActuator 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubCaseActionActuator.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubCaseActionActuator.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubCaseActionActuator.InitializeStub">
            <summary>初始化 type StubCaseActionActuator 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseActionActuator.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseActionActuator.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseActionActuator.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubCaseDataSource">
            <summary>CaseExecutiveActuator.CaseDataSource 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubCaseDataSource.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubCaseDataSource.InitializeStub">
            <summary>初始化 type StubCaseDataSource 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseDataSource.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseDataSource.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseDataSource.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForHttp">
            <summary>CaseExecutiveActuator.CaseProtocolExecutionForHttp 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForHttp.#ctor(CaseExecutiveActuator.myConnectForHttp)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForHttp.InitializeStub">
            <summary>初始化 type StubCaseProtocolExecutionForHttp 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForHttp.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForHttp.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForHttp.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForVanelife_http">
            <summary>CaseExecutiveActuator.CaseProtocolExecutionForVanelife_http 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForVanelife_http.#ctor(CaseExecutiveActuator.myConnectForVanelife_http)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForVanelife_http.InitializeStub">
            <summary>初始化 type StubCaseProtocolExecutionForVanelife_http 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForVanelife_http.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForVanelife_http.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForVanelife_http.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubICaseExecutionContent">
            <summary>CaseExecutiveActuator.ICaseExecutionContent 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubICaseExecutionContent.#ctor">
            <summary>初始化 type StubICaseExecutionContent 的新实例</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubICaseExecutionContent.MyCaseActuatorGet">
            <summary>设置 ICaseExecutionContent.get_myCaseActuator() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubICaseExecutionContent.MyCaseProtocolGet">
            <summary>设置 ICaseExecutionContent.get_myCaseProtocol() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubICaseExecutionContent.MyErrorMessageGet">
            <summary>设置 ICaseExecutionContent.get_myErrorMessage() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubICaseExecutionContent.MyExecutionContentGet">
            <summary>设置 ICaseExecutionContent.get_myExecutionContent() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubICaseExecutionContent.MyExecutionTargetGet">
            <summary>设置 ICaseExecutionContent.get_myExecutionTarget() 的 stub</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubICaseExecutionContent.cea::CaseExecutiveActuator#ICaseExecutionContent#myCaseActuator">
            <summary>设置 ICaseExecutionContent.get_myCaseActuator() 的 stub</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubICaseExecutionContent.cea::CaseExecutiveActuator#ICaseExecutionContent#myCaseProtocol">
            <summary>设置 ICaseExecutionContent.get_myCaseProtocol() 的 stub</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubICaseExecutionContent.cea::CaseExecutiveActuator#ICaseExecutionContent#myErrorMessage">
            <summary>设置 ICaseExecutionContent.get_myErrorMessage() 的 stub</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubICaseExecutionContent.cea::CaseExecutiveActuator#ICaseExecutionContent#myExecutionContent">
            <summary>设置 ICaseExecutionContent.get_myExecutionContent() 的 stub</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubICaseExecutionContent.cea::CaseExecutiveActuator#ICaseExecutionContent#myExecutionTarget">
            <summary>设置 ICaseExecutionContent.get_myExecutionTarget() 的 stub</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice">
            <summary>CaseExecutiveActuator.ICaseExecutionDevice 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.#ctor">
            <summary>初始化 type StubICaseExecutionDevice 的新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.cea::CaseExecutiveActuator#ICaseExecutionDevice#executionDeviceClose">
            <summary>设置 ICaseExecutionDevice.executionDeviceClose() 的 存根</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.cea::CaseExecutiveActuator#ICaseExecutionDevice#executionDeviceConnect">
            <summary>设置 ICaseExecutionDevice.executionDeviceConnect() 的 存根</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.cea::CaseExecutiveActuator#ICaseExecutionDevice#executionDeviceRun(CaseExecutiveActuator.ICaseExecutionContent,CaseExecutiveActuator.delegateGetExecutiveData,System.String,CaseExecutiveActuator.ActuatorStaticDataCollection,System.Int32)">
            <summary>设置 ICaseExecutionDevice.executionDeviceRun(ICaseExecutionContent yourExecutionContent, delegateGetExecutiveData yourExecutiveDelegate, String sender, ActuatorStaticDataCollection yourActuatorStaticDataCollection, Int32 caseId) 的 存根</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.Clone">
            <summary>设置 ICloneable.Clone() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.ExecutionDeviceClose">
            <summary>设置 ICaseExecutionDevice.executionDeviceClose() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.ExecutionDeviceConnect">
            <summary>设置 ICaseExecutionDevice.executionDeviceConnect() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.ExecutionDeviceRunICaseExecutionContentdelegateGetExecutiveDataStringActuatorStaticDataCollectionInt32">
            <summary>设置 ICaseExecutionDevice.executionDeviceRun(ICaseExecutionContent yourExecutionContent, delegateGetExecutiveData yourExecutiveDelegate, String sender, ActuatorStaticDataCollection yourActuatorStaticDataCollection, Int32 caseId) 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.GetProtocolTypeGet">
            <summary>设置 ICaseExecutionDevice.get_getProtocolType() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.IsDeviceConnectGet">
            <summary>设置 ICaseExecutionDevice.get_isDeviceConnect() 的 stub</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.global::System#ICloneable#Clone">
            <summary>设置 ICloneable.Clone() 的 存根</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.cea::CaseExecutiveActuator#ICaseExecutionDevice#getProtocolType">
            <summary>设置 ICaseExecutionDevice.get_getProtocolType() 的 stub</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.cea::CaseExecutiveActuator#ICaseExecutionDevice#isDeviceConnect">
            <summary>设置 ICaseExecutionDevice.get_isDeviceConnect() 的 stub</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubICaseProtocolExecution">
            <summary>CaseExecutiveActuator.ICaseProtocolExecution 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubICaseProtocolExecution.#ctor">
            <summary>初始化 type StubICaseProtocolExecution 的新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubICaseProtocolExecution.cea::CaseExecutiveActuator#ICaseProtocolExecution#executionProtocolCase">
            <summary>设置 ICaseProtocolExecution.executionProtocolCase() 的 存根</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubICaseProtocolExecution.ExecutionProtocolCase">
            <summary>设置 ICaseProtocolExecution.executionProtocolCase() 的 stub</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubIConnectExecutiveData">
            <summary>CaseExecutiveActuator.IConnectExecutiveData 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIConnectExecutiveData.#ctor">
            <summary>初始化 type StubIConnectExecutiveData 的新实例</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIConnectExecutiveData.MyCaseProtocolGet">
            <summary>设置 IConnectExecutiveData.get_myCaseProtocol() 的 stub</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubIConnectExecutiveData.cea::CaseExecutiveActuator#IConnectExecutiveData#myCaseProtocol">
            <summary>设置 IConnectExecutiveData.get_myCaseProtocol() 的 stub</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource">
            <summary>CaseExecutiveActuator.IRunTimeDataSource 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.#ctor">
            <summary>初始化 type StubIRunTimeDataSource 的新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.cea::CaseExecutiveActuator#IRunTimeDataSource#ConnectDataSource">
            <summary>设置 IRunTimeDataSource.ConnectDataSource() 的 存根</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.cea::CaseExecutiveActuator#IRunTimeDataSource#DataSet(System.String,System.String)">
            <summary>设置 IRunTimeDataSource.DataSet(String vauleAddress, String expectData) 的 存根</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.cea::CaseExecutiveActuator#IRunTimeDataSource#DisConnectDataSource">
            <summary>设置 IRunTimeDataSource.DisConnectDataSource() 的 存根</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.cea::CaseExecutiveActuator#IRunTimeDataSource#GetDataVaule(System.String)">
            <summary>设置 IRunTimeDataSource.GetDataVaule(String vauleAddress) 的 存根</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.cea::CaseExecutiveActuator#IRunTimeStaticData#DataCurrent">
            <summary>设置 IRunTimeStaticData.DataCurrent() 的 存根</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.cea::CaseExecutiveActuator#IRunTimeStaticData#DataMoveNext">
            <summary>设置 IRunTimeStaticData.DataMoveNext() 的 存根</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.cea::CaseExecutiveActuator#IRunTimeStaticData#DataReset">
            <summary>设置 IRunTimeStaticData.DataReset() 的 存根</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.cea::CaseExecutiveActuator#IRunTimeStaticData#DataSet(System.String)">
            <summary>设置 IRunTimeStaticData.DataSet(String expectData) 的 存根</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.Clone">
            <summary>设置 ICloneable.Clone() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.ConnectDataSource">
            <summary>设置 IRunTimeDataSource.ConnectDataSource() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.DataCurrent">
            <summary>设置 IRunTimeStaticData.DataCurrent() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.DataMoveNext">
            <summary>设置 IRunTimeStaticData.DataMoveNext() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.DataReset">
            <summary>设置 IRunTimeStaticData.DataReset() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.DataSetString">
            <summary>设置 IRunTimeStaticData.DataSet(String expectData) 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.DataSetStringString">
            <summary>设置 IRunTimeDataSource.DataSet(String vauleAddress, String expectData) 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.DisConnectDataSource">
            <summary>设置 IRunTimeDataSource.DisConnectDataSource() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.GetDataVauleString">
            <summary>设置 IRunTimeDataSource.GetDataVaule(String vauleAddress) 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.IsConnectedGet">
            <summary>设置 IRunTimeDataSource.get_IsConnected() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.RunTimeStaticDataTypeGet">
            <summary>设置 IRunTimeStaticData.get_RunTimeStaticDataType() 的 stub</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.global::System#ICloneable#Clone">
            <summary>设置 ICloneable.Clone() 的 存根</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.cea::CaseExecutiveActuator#IRunTimeDataSource#IsConnected">
            <summary>设置 IRunTimeDataSource.get_IsConnected() 的 stub</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.cea::CaseExecutiveActuator#IRunTimeStaticData#RunTimeStaticDataType">
            <summary>设置 IRunTimeStaticData.get_RunTimeStaticDataType() 的 stub</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData">
            <summary>CaseExecutiveActuator.IRunTimeStaticData 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.#ctor">
            <summary>初始化 type StubIRunTimeStaticData 的新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.cea::CaseExecutiveActuator#IRunTimeStaticData#DataCurrent">
            <summary>设置 IRunTimeStaticData.DataCurrent() 的 存根</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.cea::CaseExecutiveActuator#IRunTimeStaticData#DataMoveNext">
            <summary>设置 IRunTimeStaticData.DataMoveNext() 的 存根</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.cea::CaseExecutiveActuator#IRunTimeStaticData#DataReset">
            <summary>设置 IRunTimeStaticData.DataReset() 的 存根</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.cea::CaseExecutiveActuator#IRunTimeStaticData#DataSet(System.String)">
            <summary>设置 IRunTimeStaticData.DataSet(String expectData) 的 存根</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.Clone">
            <summary>设置 ICloneable.Clone() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.DataCurrent">
            <summary>设置 IRunTimeStaticData.DataCurrent() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.DataMoveNext">
            <summary>设置 IRunTimeStaticData.DataMoveNext() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.DataReset">
            <summary>设置 IRunTimeStaticData.DataReset() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.DataSetString">
            <summary>设置 IRunTimeStaticData.DataSet(String expectData) 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.RunTimeStaticDataTypeGet">
            <summary>设置 IRunTimeStaticData.get_RunTimeStaticDataType() 的 stub</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.global::System#ICloneable#Clone">
            <summary>设置 ICloneable.Clone() 的 存根</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.cea::CaseExecutiveActuator#IRunTimeStaticData#RunTimeStaticDataType">
            <summary>设置 IRunTimeStaticData.get_RunTimeStaticDataType() 的 stub</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubMyCaseDataTypeEngine">
            <summary>CaseExecutiveActuator.MyCaseDataTypeEngine 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyCaseDataTypeEngine.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyCaseDataTypeEngine.InitializeStub">
            <summary>初始化 type StubMyCaseDataTypeEngine 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyCaseDataTypeEngine.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyCaseDataTypeEngine.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyCaseDataTypeEngine.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubMyCaseProtocolEngine">
            <summary>CaseExecutiveActuator.MyCaseProtocolEngine 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyCaseProtocolEngine.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyCaseProtocolEngine.InitializeStub">
            <summary>初始化 type StubMyCaseProtocolEngine 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyCaseProtocolEngine.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyCaseProtocolEngine.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyCaseProtocolEngine.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubMyConfiguration">
            <summary>CaseExecutiveActuator.MyConfiguration 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyConfiguration.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyConfiguration.InitializeStub">
            <summary>初始化 type StubMyConfiguration 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyConfiguration.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyConfiguration.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyConfiguration.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubcaseActionDescription">
            <summary>CaseExecutiveActuator.caseActionDescription 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubcaseActionDescription.#ctor(CaseExecutiveActuator.CaseAction,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubcaseActionDescription.InitializeStub">
            <summary>初始化 type StubcaseActionDescription 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubcaseActionDescription.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubcaseActionDescription.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubcaseActionDescription.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubmyBasicHttpExecutionContent">
            <summary>CaseExecutiveActuator.myBasicHttpExecutionContent 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyBasicHttpExecutionContent.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyBasicHttpExecutionContent.InitializeStub">
            <summary>初始化 type StubmyBasicHttpExecutionContent 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyBasicHttpExecutionContent.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyBasicHttpExecutionContent.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyBasicHttpExecutionContent.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubmyCaseScriptAnalysisEngine">
            <summary>CaseExecutiveActuator.myCaseScriptAnalysisEngine 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyCaseScriptAnalysisEngine.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyCaseScriptAnalysisEngine.InitializeStub">
            <summary>初始化 type StubmyCaseScriptAnalysisEngine 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyCaseScriptAnalysisEngine.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyCaseScriptAnalysisEngine.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyCaseScriptAnalysisEngine.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubmyCelerityCaseRunTime">
            <summary>CaseExecutiveActuator.myCelerityCaseRunTime 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyCelerityCaseRunTime.#ctor(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Windows.Forms.TreeNode}})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyCelerityCaseRunTime.InitializeStub">
            <summary>初始化 type StubmyCelerityCaseRunTime 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyCelerityCaseRunTime.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyCelerityCaseRunTime.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyCelerityCaseRunTime.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubmyExecutionDeviceResult">
            <summary>CaseExecutiveActuator.myExecutionDeviceResult 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyExecutionDeviceResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyExecutionDeviceResult.#ctor(System.Int32,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyExecutionDeviceResult.#ctor(CaseExecutiveActuator.CaseProtocol,System.String,System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyExecutionDeviceResult.#ctor(CaseExecutiveActuator.CaseProtocol,System.String,System.String,System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyExecutionDeviceResult.InitializeStub">
            <summary>初始化 type StubmyExecutionDeviceResult 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyExecutionDeviceResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyExecutionDeviceResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyExecutionDeviceResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubmyHttpExecutionContent">
            <summary>CaseExecutiveActuator.myHttpExecutionContent 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyHttpExecutionContent.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyHttpExecutionContent.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyHttpExecutionContent.InitializeStub">
            <summary>初始化 type StubmyHttpExecutionContent 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyHttpExecutionContent.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyHttpExecutionContent.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyHttpExecutionContent.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubmyRunCaseData`1">
            <summary>CaseExecutiveActuator.myRunCaseData`1 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyRunCaseData`1.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyRunCaseData`1.#ctor(`0,System.Int32,CaseExecutiveActuator.CaseProtocol)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyRunCaseData`1.#ctor(`0,System.Int32,CaseExecutiveActuator.CaseProtocol,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyRunCaseData`1.InitializeStub">
            <summary>初始化 type StubmyRunCaseData 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyRunCaseData`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyRunCaseData`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyRunCaseData`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubmyTreeTagInfo">
            <summary>CaseExecutiveActuator.myTreeTagInfo 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyTreeTagInfo.#ctor(CaseExecutiveActuator.CaseType,System.Xml.XmlNode)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyTreeTagInfo.#ctor(CaseExecutiveActuator.CaseType,System.Xml.XmlNode,CaseExecutiveActuator.myRunCaseData{CaseExecutiveActuator.ICaseExecutionContent})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyTreeTagInfo.InitializeStub">
            <summary>初始化 type StubmyTreeTagInfo 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyTreeTagInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyTreeTagInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyTreeTagInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Delegates.CaseExecutiveActuatorDelegates">
            <summary>包含用于 CaseExecutiveActuator 的存根和填充码的自定义委托</summary>
        </member>
    </members>
</doc>
