<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CaseExecutiveActuator.Fakes</name>
    </assembly>
    <members>
        <member name="T:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver">
            <summary>CaseExecutiveActuator.CaseMefHelper.MefPlugInDriver 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.#ctor(CaseExecutiveActuator.CaseMefHelper.MefPlugInDriver)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.Compose">
            <summary>设置 MefPlugInDriver.Compose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.Constructor">
            <summary>设置 MefPlugInDriver.MefPlugInDriver() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.ExtendTestGet">
            <summary>设置 MefPlugInDriver.get_ExtendTest() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.ExtendTestSetIExtendProtocolDriver">
            <summary>设置 MefPlugInDriver.set_ExtendTest(IExtendProtocolDriver value) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.AllInstances.Compose">
            <summary>设置 MefPlugInDriver.Compose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.AllInstances.ExtendTestGet">
            <summary>设置 MefPlugInDriver.get_ExtendTest() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.CaseMefHelper.Fakes.ShimMefPlugInDriver.AllInstances.ExtendTestSetIExtendProtocolDriver">
            <summary>设置 MefPlugInDriver.set_ExtendTest(IExtendProtocolDriver value) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.CaseMefHelper.Fakes.StubIExtendProtocolDriver">
            <summary>CaseExecutiveActuator.CaseMefHelper.IExtendProtocolDriver 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.CaseMefHelper.Fakes.StubIExtendProtocolDriver.#ctor">
            <summary>初始化 type StubIExtendProtocolDriver 的新实例</summary>
        </member>
        <member name="F:CaseExecutiveActuator.CaseMefHelper.Fakes.StubIExtendProtocolDriver.ExtendProtocolNameGet">
            <summary>设置 IExtendProtocolDriver.get_ExtendProtocolName() 的 stub</summary>
        </member>
        <member name="P:CaseExecutiveActuator.CaseMefHelper.Fakes.StubIExtendProtocolDriver.cea::CaseExecutiveActuator#CaseMefHelper#IExtendProtocolDriver#ExtendProtocolName">
            <summary>设置 IExtendProtocolDriver.get_ExtendProtocolName() 的 stub</summary>
        </member>
        <member name="T:CaseExecutiveActuator.CaseMefHelper.Fakes.StubMefPlugInDriver">
            <summary>CaseExecutiveActuator.CaseMefHelper.MefPlugInDriver 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.CaseMefHelper.Fakes.StubMefPlugInDriver.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.CaseMefHelper.Fakes.StubMefPlugInDriver.InitializeStub">
            <summary>初始化 type StubMefPlugInDriver 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.CaseMefHelper.Fakes.StubMefPlugInDriver.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.CaseMefHelper.Fakes.StubMefPlugInDriver.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.CaseMefHelper.Fakes.StubMefPlugInDriver.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell">
            <summary>CaseExecutiveActuator.Cell.CaseCell 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.#ctor(CaseExecutiveActuator.Cell.CaseCell)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AddCaseCell">
            <summary>设置 CaseCell.Add(CaseCell yourCaseCell) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.CaseRunDataGet">
            <summary>设置 CaseCell.get_CaseRunData() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.CaseRunDataSetMyRunCaseDataOfICaseExecutionContent">
            <summary>设置 CaseCell.set_CaseRunData(MyRunCaseData`1&lt;ICaseExecutionContent&gt; value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.CaseTypeGet">
            <summary>设置 CaseCell.get_CaseType() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.CaseXmlNodeGet">
            <summary>设置 CaseCell.get_CaseXmlNode() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.CaseXmlNodeSetXmlNode">
            <summary>设置 CaseCell.set_CaseXmlNode(XmlNode value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.ChildCellsGet">
            <summary>设置 CaseCell.get_ChildCells() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.Constructor">
            <summary>设置 CaseCell.CaseCell() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.ConstructorCaseTypeXmlNodeMyRunCaseDataOfICaseExecutionContent">
            <summary>设置 CaseCell.CaseCell(CaseType yourCaseType, XmlNode yourXmlNode, MyRunCaseData`1&lt;ICaseExecutionContent&gt; yourCaseRunData) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.IsHasChildGet">
            <summary>设置 CaseCell.get_IsHasChild() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.IsHasNextCellGet">
            <summary>设置 CaseCell.get_IsHasNextCell() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.IsHasParentGet">
            <summary>设置 CaseCell.get_IsHasParent() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.NextCellGet">
            <summary>设置 CaseCell.get_NextCell() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.ParentCellGet">
            <summary>设置 CaseCell.get_ParentCell() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.SetNextCellCaseCell">
            <summary>设置 CaseCell.SetNextCell(CaseCell yourCaseCell) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.SetParentCellCaseCell">
            <summary>设置 CaseCell.SetParentCell(CaseCell yourCaseCell) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.UiTagGet">
            <summary>设置 CaseCell.get_UiTag() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.UiTagSetObject">
            <summary>设置 CaseCell.set_UiTag(Object value) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.AddCaseCell">
            <summary>设置 CaseCell.Add(CaseCell yourCaseCell) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.CaseRunDataGet">
            <summary>设置 CaseCell.get_CaseRunData() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.CaseRunDataSetMyRunCaseDataOfICaseExecutionContent">
            <summary>设置 CaseCell.set_CaseRunData(MyRunCaseData`1&lt;ICaseExecutionContent&gt; value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.CaseTypeGet">
            <summary>设置 CaseCell.get_CaseType() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.CaseXmlNodeGet">
            <summary>设置 CaseCell.get_CaseXmlNode() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.CaseXmlNodeSetXmlNode">
            <summary>设置 CaseCell.set_CaseXmlNode(XmlNode value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.ChildCellsGet">
            <summary>设置 CaseCell.get_ChildCells() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.IsHasChildGet">
            <summary>设置 CaseCell.get_IsHasChild() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.IsHasNextCellGet">
            <summary>设置 CaseCell.get_IsHasNextCell() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.IsHasParentGet">
            <summary>设置 CaseCell.get_IsHasParent() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.NextCellGet">
            <summary>设置 CaseCell.get_NextCell() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.ParentCellGet">
            <summary>设置 CaseCell.get_ParentCell() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.SetNextCellCaseCell">
            <summary>设置 CaseCell.SetNextCell(CaseCell yourCaseCell) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.SetParentCellCaseCell">
            <summary>设置 CaseCell.SetParentCell(CaseCell yourCaseCell) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.UiTagGet">
            <summary>设置 CaseCell.get_UiTag() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimCaseCell.AllInstances.UiTagSetObject">
            <summary>设置 CaseCell.set_UiTag(Object value) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection">
            <summary>CaseExecutiveActuator.Cell.ProjctCollection 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.#ctor(CaseExecutiveActuator.Cell.ProjctCollection)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.AddCaseCell">
            <summary>设置 ProjctCollection.Add(CaseCell yourCaseCell) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.Constructor">
            <summary>设置 ProjctCollection.ProjctCollection() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.ItemGetInt32Int32">
            <summary>设置 ProjctCollection.get_Item(Int32 indexP, Int32 indexC) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.ProjectCellsGet">
            <summary>设置 ProjctCollection.get_ProjectCells() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.AllInstances.AddCaseCell">
            <summary>设置 ProjctCollection.Add(CaseCell yourCaseCell) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.AllInstances.ItemGetInt32Int32">
            <summary>设置 ProjctCollection.get_Item(Int32 indexP, Int32 indexC) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.ShimProjctCollection.AllInstances.ProjectCellsGet">
            <summary>设置 ProjctCollection.get_ProjectCells() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Cell.Fakes.StubCaseCell">
            <summary>CaseExecutiveActuator.Cell.CaseCell 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.StubCaseCell.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.StubCaseCell.#ctor(CaseExecutiveActuator.CaseType,System.Xml.XmlNode,CaseExecutiveActuator.MyRunCaseData{CaseExecutiveActuator.ICaseExecutionContent})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.StubCaseCell.InitializeStub">
            <summary>初始化 type StubCaseCell 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.StubCaseCell.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.StubCaseCell.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.StubCaseCell.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Cell.Fakes.StubProjctCollection">
            <summary>CaseExecutiveActuator.Cell.ProjctCollection 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.StubProjctCollection.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Cell.Fakes.StubProjctCollection.InitializeStub">
            <summary>初始化 type StubProjctCollection 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.StubProjctCollection.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.StubProjctCollection.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Cell.Fakes.StubProjctCollection.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection">
            <summary>CaseExecutiveActuator.ActuatorStaticDataCollection 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.#ctor(CaseExecutiveActuator.ActuatorStaticDataCollection)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.Bind(System.ICloneable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.AddStaticDataKeyStringString">
            <summary>设置 ActuatorStaticDataCollection.AddStaticDataKey(String key, String vaule) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.AddStaticDataParameterStringIRunTimeStaticData">
            <summary>设置 ActuatorStaticDataCollection.AddStaticDataParameter(String key, IRunTimeStaticData vaule) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.AddStaticDataSouceStringIRunTimeDataSource">
            <summary>设置 ActuatorStaticDataCollection.AddStaticDataSouce(String key, IRunTimeDataSource vaule) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.Clone">
            <summary>设置 ActuatorStaticDataCollection.Clone() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.Constructor">
            <summary>设置 ActuatorStaticDataCollection.ActuatorStaticDataCollection() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.ConstructorDictionaryOfStringStringDictionaryOfStringIRunTimeStaticDataDictionaryOfStringIRunTimeDataSource">
            <summary>设置 ActuatorStaticDataCollection.ActuatorStaticDataCollection(Dictionary`2&lt;String,String&gt; yourActuatorParameterList, Dictionary`2&lt;String,IRunTimeStaticData&gt; yourActuatorStaticDataList, Dictionary`2&lt;String,IRunTimeDataSource&gt; yourActuatorStaticDataSouceList) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.Dispose">
            <summary>设置 ActuatorStaticDataCollection.Dispose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.IsHasSameKeyStringInt32">
            <summary>设置 ActuatorStaticDataCollection.IsHasSameKey(String key, Int32 ignoreListIndex) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.IsHaveSameKeyString">
            <summary>设置 ActuatorStaticDataCollection.IsHaveSameKey(String yourKey) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.OnListChanged">
            <summary>设置 ActuatorStaticDataCollection.OnListChanged() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.RemoveStaticDataStringBoolean">
            <summary>设置 ActuatorStaticDataCollection.RemoveStaticData(String key, Boolean isRegex) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.RunActuatorStaticDataKeyListGet">
            <summary>设置 ActuatorStaticDataCollection.get_RunActuatorStaticDataKeyList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.RunActuatorStaticDataParameterListGet">
            <summary>设置 ActuatorStaticDataCollection.get_RunActuatorStaticDataParameterList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.RunActuatorStaticDataSouceListGet">
            <summary>设置 ActuatorStaticDataCollection.get_RunActuatorStaticDataSouceList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.SetCaseActionActuatorCaseActionActuator">
            <summary>设置 ActuatorStaticDataCollection.SetCaseActionActuator(CaseActionActuator yourCaseActionActuator) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.SetStaticDataStringString">
            <summary>设置 ActuatorStaticDataCollection.SetStaticData(String key, String configVaule) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.AllInstances.AddStaticDataKeyStringString">
            <summary>设置 ActuatorStaticDataCollection.AddStaticDataKey(String key, String vaule) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.AllInstances.AddStaticDataParameterStringIRunTimeStaticData">
            <summary>设置 ActuatorStaticDataCollection.AddStaticDataParameter(String key, IRunTimeStaticData vaule) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.AllInstances.AddStaticDataSouceStringIRunTimeDataSource">
            <summary>设置 ActuatorStaticDataCollection.AddStaticDataSouce(String key, IRunTimeDataSource vaule) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.AllInstances.Clone">
            <summary>设置 ActuatorStaticDataCollection.Clone() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.AllInstances.Dispose">
            <summary>设置 ActuatorStaticDataCollection.Dispose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.AllInstances.IsHasSameKeyStringInt32">
            <summary>设置 ActuatorStaticDataCollection.IsHasSameKey(String key, Int32 ignoreListIndex) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.AllInstances.IsHaveSameKeyString">
            <summary>设置 ActuatorStaticDataCollection.IsHaveSameKey(String yourKey) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.AllInstances.OnListChanged">
            <summary>设置 ActuatorStaticDataCollection.OnListChanged() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.AllInstances.RemoveStaticDataStringBoolean">
            <summary>设置 ActuatorStaticDataCollection.RemoveStaticData(String key, Boolean isRegex) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.AllInstances.RunActuatorStaticDataKeyListGet">
            <summary>设置 ActuatorStaticDataCollection.get_RunActuatorStaticDataKeyList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.AllInstances.RunActuatorStaticDataParameterListGet">
            <summary>设置 ActuatorStaticDataCollection.get_RunActuatorStaticDataParameterList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.AllInstances.RunActuatorStaticDataSouceListGet">
            <summary>设置 ActuatorStaticDataCollection.get_RunActuatorStaticDataSouceList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.AllInstances.SetCaseActionActuatorCaseActionActuator">
            <summary>设置 ActuatorStaticDataCollection.SetCaseActionActuator(CaseActionActuator yourCaseActionActuator) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimActuatorStaticDataCollection.AllInstances.SetStaticDataStringString">
            <summary>设置 ActuatorStaticDataCollection.SetStaticData(String key, String configVaule) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimBasicProtocolPars">
            <summary>CaseExecutiveActuator.BasicProtocolPars 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimBasicProtocolPars.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimBasicProtocolPars.#ctor(CaseExecutiveActuator.BasicProtocolPars)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimBasicProtocolPars.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimBasicProtocolPars.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimBasicProtocolPars.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimBasicProtocolPars.Constructor">
            <summary>设置 BasicProtocolPars.BasicProtocolPars() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimBasicProtocolPars.GetRunContentXmlNode">
            <summary>设置 BasicProtocolPars.GetRunContent(XmlNode yourContentNode) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimBasicProtocolPars.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimCaseActionActuator">
            <summary>CaseExecutiveActuator.CaseActionActuator 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.#ctor(CaseExecutiveActuator.CaseActionActuator)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.Bind(System.ICloneable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AddExecutionDeviceStringIConnectExecutiveData">
            <summary>设置 CaseActionActuator.AddExecutionDevice(String yourDeviceName, IConnectExecutiveData yourDeviceConnectInfo) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AddExecutionResultMyExecutionDeviceResult">
            <summary>设置 CaseActionActuator.AddExecutionResult(MyExecutionDeviceResult yourExecutionResult) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AddRunActuatorStaticDataKeyStringString">
            <summary>设置 CaseActionActuator.AddRunActuatorStaticDataKey(String yourParameterName, String yourParameterVaule) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.ClearInvalidThreadList">
            <summary>设置 CaseActionActuator.ClearInvalidThreadList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.Clone">
            <summary>设置 CaseActionActuator.Clone() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.ConnectExecutionDevice">
            <summary>设置 CaseActionActuator.ConnectExecutionDevice() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.Constructor">
            <summary>设置 CaseActionActuator.CaseActionActuator() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.ConstructorString">
            <summary>设置 CaseActionActuator.CaseActionActuator(String yourName) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.CreateNewActuatorTask">
            <summary>设置 CaseActionActuator.CreateNewActuatorTask() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.CreateNewActuatorTryCaseCell">
            <summary>设置 CaseActionActuator.CreateNewActuatorTry(CaseCell yourTryNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.DisconnectExecutionDevice">
            <summary>设置 CaseActionActuator.DisconnectExecutionDevice() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.Dispose">
            <summary>设置 CaseActionActuator.Dispose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.DisposeBoolean">
            <summary>设置 CaseActionActuator.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.ErrorInfoGet">
            <summary>设置 CaseActionActuator.get_ErrorInfo() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.ExecutiveActuatorTask">
            <summary>设置 CaseActionActuator.ExecutiveActuatorTask() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.ExecutiveActuatorTryObject">
            <summary>设置 CaseActionActuator.ExecutiveActuatorTry(Object yourTryNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.ExecutiveThinkTimeGet">
            <summary>设置 CaseActionActuator.get_ExecutiveThinkTime() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.ExecutiveThinkTimeSetInt32">
            <summary>设置 CaseActionActuator.set_ExecutiveThinkTime(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.IsActionActuatorCanRunCaseCell">
            <summary>设置 CaseActionActuator.IsActionActuatorCanRun(CaseCell yourStartNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.IsActuatorDataFillGet">
            <summary>设置 CaseActionActuator.get_IsActuatorDataFill() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.KillAll">
            <summary>设置 CaseActionActuator.KillAll() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.LoadScriptRunTimeXmlNode">
            <summary>设置 CaseActionActuator.LoadScriptRunTime(XmlNode sourceNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.MyNameGet">
            <summary>设置 CaseActionActuator.get_MyName() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.MyNameSetString">
            <summary>设置 CaseActionActuator.set_MyName(String value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.NowExecutionDeviceListGet">
            <summary>设置 CaseActionActuator.get_NowExecutionDeviceList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.NowExecutionResultListGet">
            <summary>设置 CaseActionActuator.get_NowExecutionResultList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.NowExecutiveDataGet">
            <summary>设置 CaseActionActuator.get_NowExecutiveData() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.OnActuatorStateChangedAddCaseActionActuatordelegateGetActuatorStateEventHandler">
            <summary>设置 CaseActionActuator.add_OnActuatorStateChanged(delegateGetActuatorStateEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.OnActuatorStateChangedRemoveCaseActionActuatordelegateGetActuatorStateEventHandler">
            <summary>设置 CaseActionActuator.remove_OnActuatorStateChanged(delegateGetActuatorStateEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.OnExecutiveResultAddCaseActionActuatordelegateGetExecutiveResultEventHandler">
            <summary>设置 CaseActionActuator.add_OnExecutiveResult(delegateGetExecutiveResultEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.OnExecutiveResultRemoveCaseActionActuatordelegateGetExecutiveResultEventHandler">
            <summary>设置 CaseActionActuator.remove_OnExecutiveResult(delegateGetExecutiveResultEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.OnGetExecutiveDataAdddelegateGetExecutiveData">
            <summary>设置 CaseActionActuator.add_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.OnGetExecutiveDataRemovedelegateGetExecutiveData">
            <summary>设置 CaseActionActuator.remove_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.PauseCaseScript">
            <summary>设置 CaseActionActuator.PauseCaseScript() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.ResetErrorInfo">
            <summary>设置 CaseActionActuator.ResetErrorInfo() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.ResetNowExecutiveData">
            <summary>设置 CaseActionActuator.ResetNowExecutiveData() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.RunActuatorStaticDataCollectionGet">
            <summary>设置 CaseActionActuator.get_RunActuatorStaticDataCollection() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.RunCaseScriptCaseCell">
            <summary>设置 CaseActionActuator.RunCaseScript(CaseCell yourStartNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.RunCellProjctCollectionGet">
            <summary>设置 CaseActionActuator.get_RunCellProjctCollection() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.RunProgressGet">
            <summary>设置 CaseActionActuator.get_RunProgress() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.RunTimeCaseDictionaryGet">
            <summary>设置 CaseActionActuator.get_RunTimeCaseDictionary() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.RunstateGet">
            <summary>设置 CaseActionActuator.get_Runstate() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.SetAndSaveNowActionErrorString">
            <summary>设置 CaseActionActuator.SetAndSaveNowActionError(String yourContent) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.SetAndSaveNowExecutiveDataString">
            <summary>设置 CaseActionActuator.SetAndSaveNowExecutiveData(String yourContent) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.SetCaseRunTimeDictionaryOfInt32DictionaryOfInt32CaseCellProjctCollection">
            <summary>设置 CaseActionActuator.SetCaseRunTime(Dictionary`2&lt;Int32,Dictionary`2&lt;Int32,CaseCell&gt;&gt; yourCaseDictionary, ProjctCollection yourProjctCollection) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.SetNowActionErrorString">
            <summary>设置 CaseActionActuator.SetNowActionError(String yourContent) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.SetNowExecutiveDataString">
            <summary>设置 CaseActionActuator.SetNowExecutiveData(String yourContent) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.SetRunStateCaseActuatorState">
            <summary>设置 CaseActionActuator.SetRunState(CaseActuatorState yourStae) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.StopCaseScript">
            <summary>设置 CaseActionActuator.StopCaseScript() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.TryNextCaseScriptCaseCell">
            <summary>设置 CaseActionActuator.TryNextCaseScript(CaseCell yourNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.TryNowCaseScriptCaseCell">
            <summary>设置 CaseActionActuator.TryNowCaseScript(CaseCell yourNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.UpdataRunTimeCaseDictionaryDictionaryOfInt32DictionaryOfInt32CaseCell">
            <summary>设置 CaseActionActuator.UpdataRunTimeCaseDictionary(Dictionary`2&lt;Int32,Dictionary`2&lt;Int32,CaseCell&gt;&gt; yourCaseDictionary) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.caseRunTime_OnLoopChangeEventCaseCellString">
            <summary>设置 CaseActionActuator.caseRunTime_OnLoopChangeEvent(CaseCell yourTarget, String yourMessage) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.caseRunTime_OnQueueChangeEventCaseCellString">
            <summary>设置 CaseActionActuator.caseRunTime_OnQueueChangeEvent(CaseCell yourTarget, String yourMessage) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.AddExecutionDeviceStringIConnectExecutiveData">
            <summary>设置 CaseActionActuator.AddExecutionDevice(String yourDeviceName, IConnectExecutiveData yourDeviceConnectInfo) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.AddExecutionResultMyExecutionDeviceResult">
            <summary>设置 CaseActionActuator.AddExecutionResult(MyExecutionDeviceResult yourExecutionResult) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.AddRunActuatorStaticDataKeyStringString">
            <summary>设置 CaseActionActuator.AddRunActuatorStaticDataKey(String yourParameterName, String yourParameterVaule) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.ClearInvalidThreadList">
            <summary>设置 CaseActionActuator.ClearInvalidThreadList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.Clone">
            <summary>设置 CaseActionActuator.Clone() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.ConnectExecutionDevice">
            <summary>设置 CaseActionActuator.ConnectExecutionDevice() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.CreateNewActuatorTask">
            <summary>设置 CaseActionActuator.CreateNewActuatorTask() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.CreateNewActuatorTryCaseCell">
            <summary>设置 CaseActionActuator.CreateNewActuatorTry(CaseCell yourTryNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.DisconnectExecutionDevice">
            <summary>设置 CaseActionActuator.DisconnectExecutionDevice() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.Dispose">
            <summary>设置 CaseActionActuator.Dispose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.DisposeBoolean">
            <summary>设置 CaseActionActuator.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.ErrorInfoGet">
            <summary>设置 CaseActionActuator.get_ErrorInfo() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.ExecutiveActuatorTask">
            <summary>设置 CaseActionActuator.ExecutiveActuatorTask() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.ExecutiveActuatorTryObject">
            <summary>设置 CaseActionActuator.ExecutiveActuatorTry(Object yourTryNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.ExecutiveThinkTimeGet">
            <summary>设置 CaseActionActuator.get_ExecutiveThinkTime() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.ExecutiveThinkTimeSetInt32">
            <summary>设置 CaseActionActuator.set_ExecutiveThinkTime(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.IsActionActuatorCanRunCaseCell">
            <summary>设置 CaseActionActuator.IsActionActuatorCanRun(CaseCell yourStartNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.IsActuatorDataFillGet">
            <summary>设置 CaseActionActuator.get_IsActuatorDataFill() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.KillAll">
            <summary>设置 CaseActionActuator.KillAll() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.LoadScriptRunTimeXmlNode">
            <summary>设置 CaseActionActuator.LoadScriptRunTime(XmlNode sourceNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.MyNameGet">
            <summary>设置 CaseActionActuator.get_MyName() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.MyNameSetString">
            <summary>设置 CaseActionActuator.set_MyName(String value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.NowExecutionDeviceListGet">
            <summary>设置 CaseActionActuator.get_NowExecutionDeviceList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.NowExecutionResultListGet">
            <summary>设置 CaseActionActuator.get_NowExecutionResultList() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.NowExecutiveDataGet">
            <summary>设置 CaseActionActuator.get_NowExecutiveData() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.OnActuatorStateChangedAddCaseActionActuatordelegateGetActuatorStateEventHandler">
            <summary>设置 CaseActionActuator.add_OnActuatorStateChanged(delegateGetActuatorStateEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.OnActuatorStateChangedRemoveCaseActionActuatordelegateGetActuatorStateEventHandler">
            <summary>设置 CaseActionActuator.remove_OnActuatorStateChanged(delegateGetActuatorStateEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.OnExecutiveResultAddCaseActionActuatordelegateGetExecutiveResultEventHandler">
            <summary>设置 CaseActionActuator.add_OnExecutiveResult(delegateGetExecutiveResultEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.OnExecutiveResultRemoveCaseActionActuatordelegateGetExecutiveResultEventHandler">
            <summary>设置 CaseActionActuator.remove_OnExecutiveResult(delegateGetExecutiveResultEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.OnGetExecutiveDataAdddelegateGetExecutiveData">
            <summary>设置 CaseActionActuator.add_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.OnGetExecutiveDataRemovedelegateGetExecutiveData">
            <summary>设置 CaseActionActuator.remove_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.PauseCaseScript">
            <summary>设置 CaseActionActuator.PauseCaseScript() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.ResetErrorInfo">
            <summary>设置 CaseActionActuator.ResetErrorInfo() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.ResetNowExecutiveData">
            <summary>设置 CaseActionActuator.ResetNowExecutiveData() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.RunActuatorStaticDataCollectionGet">
            <summary>设置 CaseActionActuator.get_RunActuatorStaticDataCollection() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.RunCaseScriptCaseCell">
            <summary>设置 CaseActionActuator.RunCaseScript(CaseCell yourStartNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.RunCellProjctCollectionGet">
            <summary>设置 CaseActionActuator.get_RunCellProjctCollection() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.RunProgressGet">
            <summary>设置 CaseActionActuator.get_RunProgress() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.RunTimeCaseDictionaryGet">
            <summary>设置 CaseActionActuator.get_RunTimeCaseDictionary() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.RunstateGet">
            <summary>设置 CaseActionActuator.get_Runstate() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.SetAndSaveNowActionErrorString">
            <summary>设置 CaseActionActuator.SetAndSaveNowActionError(String yourContent) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.SetAndSaveNowExecutiveDataString">
            <summary>设置 CaseActionActuator.SetAndSaveNowExecutiveData(String yourContent) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.SetCaseRunTimeDictionaryOfInt32DictionaryOfInt32CaseCellProjctCollection">
            <summary>设置 CaseActionActuator.SetCaseRunTime(Dictionary`2&lt;Int32,Dictionary`2&lt;Int32,CaseCell&gt;&gt; yourCaseDictionary, ProjctCollection yourProjctCollection) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.SetNowActionErrorString">
            <summary>设置 CaseActionActuator.SetNowActionError(String yourContent) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.SetNowExecutiveDataString">
            <summary>设置 CaseActionActuator.SetNowExecutiveData(String yourContent) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.SetRunStateCaseActuatorState">
            <summary>设置 CaseActionActuator.SetRunState(CaseActuatorState yourStae) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.StopCaseScript">
            <summary>设置 CaseActionActuator.StopCaseScript() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.TryNextCaseScriptCaseCell">
            <summary>设置 CaseActionActuator.TryNextCaseScript(CaseCell yourNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.TryNowCaseScriptCaseCell">
            <summary>设置 CaseActionActuator.TryNowCaseScript(CaseCell yourNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.UpdataRunTimeCaseDictionaryDictionaryOfInt32DictionaryOfInt32CaseCell">
            <summary>设置 CaseActionActuator.UpdataRunTimeCaseDictionary(Dictionary`2&lt;Int32,Dictionary`2&lt;Int32,CaseCell&gt;&gt; yourCaseDictionary) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.caseRunTime_OnLoopChangeEventCaseCellString">
            <summary>设置 CaseActionActuator.caseRunTime_OnLoopChangeEvent(CaseCell yourTarget, String yourMessage) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionActuator.AllInstances.caseRunTime_OnQueueChangeEventCaseCellString">
            <summary>设置 CaseActionActuator.caseRunTime_OnQueueChangeEvent(CaseCell yourTarget, String yourMessage) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimCaseActionDescription">
            <summary>CaseExecutiveActuator.CaseActionDescription 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseActionDescription.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseActionDescription.#ctor(CaseExecutiveActuator.CaseActionDescription)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseActionDescription.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseActionDescription.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionDescription.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseActionDescription.ConstructorCaseActionString">
            <summary>设置 CaseActionDescription.CaseActionDescription(CaseAction yourCaseAction, String yourInfo) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimCaseActionDescription.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ">
            <summary>CaseExecutiveActuator.CaseProtocolExecutionForActiveMQ 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.#ctor(CaseExecutiveActuator.CaseProtocolExecutionForActiveMQ)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.Bind(CaseExecutiveActuator.ICaseExecutionDevice)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.Bind(System.ICloneable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.Clone">
            <summary>设置 CaseProtocolExecutionForActiveMQ.Clone() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.ConstructormyConnectForActiveMQ">
            <summary>设置 CaseProtocolExecutionForActiveMQ.CaseProtocolExecutionForActiveMQ(myConnectForActiveMQ yourConnectInfo) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.ExecutionDeviceClose">
            <summary>设置 CaseProtocolExecutionForActiveMQ.ExecutionDeviceClose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.ExecutionDeviceConnect">
            <summary>设置 CaseProtocolExecutionForActiveMQ.ExecutionDeviceConnect() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.ExecutionDeviceRunICaseExecutionContentdelegateGetExecutiveDataStringActuatorStaticDataCollectionInt32">
            <summary>设置 CaseProtocolExecutionForActiveMQ.ExecutionDeviceRun(ICaseExecutionContent yourExecutionContent, delegateGetExecutiveData yourExecutiveDelegate, String sender, ActuatorStaticDataCollection yourActuatorStaticDataCollection, Int32 caseId) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.GetRunContentXmlNode">
            <summary>设置 CaseProtocolExecutionForActiveMQ.GetRunContent(XmlNode yourContentNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.IsDeviceConnectGet">
            <summary>设置 CaseProtocolExecutionForActiveMQ.get_IsDeviceConnect() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.OnGetExecutiveDataAdddelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForActiveMQ.add_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.OnGetExecutiveDataRemovedelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForActiveMQ.remove_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.ProtocolTypeGet">
            <summary>设置 CaseProtocolExecutionForActiveMQ.get_ProtocolType() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.AllInstances.Clone">
            <summary>设置 CaseProtocolExecutionForActiveMQ.Clone() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.AllInstances.ExecutionDeviceClose">
            <summary>设置 CaseProtocolExecutionForActiveMQ.ExecutionDeviceClose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.AllInstances.ExecutionDeviceConnect">
            <summary>设置 CaseProtocolExecutionForActiveMQ.ExecutionDeviceConnect() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.AllInstances.ExecutionDeviceRunICaseExecutionContentdelegateGetExecutiveDataStringActuatorStaticDataCollectionInt32">
            <summary>设置 CaseProtocolExecutionForActiveMQ.ExecutionDeviceRun(ICaseExecutionContent yourExecutionContent, delegateGetExecutiveData yourExecutiveDelegate, String sender, ActuatorStaticDataCollection yourActuatorStaticDataCollection, Int32 caseId) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.AllInstances.IsDeviceConnectGet">
            <summary>设置 CaseProtocolExecutionForActiveMQ.get_IsDeviceConnect() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.AllInstances.OnGetExecutiveDataAdddelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForActiveMQ.add_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.AllInstances.OnGetExecutiveDataRemovedelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForActiveMQ.remove_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForActiveMQ.AllInstances.ProtocolTypeGet">
            <summary>设置 CaseProtocolExecutionForActiveMQ.get_ProtocolType() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole">
            <summary>CaseExecutiveActuator.CaseProtocolExecutionForConsole 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.#ctor(CaseExecutiveActuator.CaseProtocolExecutionForConsole)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.Bind(CaseExecutiveActuator.ICaseExecutionDevice)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.Bind(System.ICloneable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.Clone">
            <summary>设置 CaseProtocolExecutionForConsole.Clone() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.ConstructormyConnectForConsole">
            <summary>设置 CaseProtocolExecutionForConsole.CaseProtocolExecutionForConsole(myConnectForConsole yourConnectInfo) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.ExecutionDeviceClose">
            <summary>设置 CaseProtocolExecutionForConsole.ExecutionDeviceClose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.ExecutionDeviceConnect">
            <summary>设置 CaseProtocolExecutionForConsole.ExecutionDeviceConnect() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.ExecutionDeviceRunICaseExecutionContentdelegateGetExecutiveDataStringActuatorStaticDataCollectionInt32">
            <summary>设置 CaseProtocolExecutionForConsole.ExecutionDeviceRun(ICaseExecutionContent yourExecutionContent, delegateGetExecutiveData yourExecutiveDelegate, String sender, ActuatorStaticDataCollection yourActuatorStaticDataCollection, Int32 caseId) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.GetRunContentXmlNode">
            <summary>设置 CaseProtocolExecutionForConsole.GetRunContent(XmlNode yourContentNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.IsDeviceConnectGet">
            <summary>设置 CaseProtocolExecutionForConsole.get_IsDeviceConnect() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.OnGetExecutiveDataAdddelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForConsole.add_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.OnGetExecutiveDataRemovedelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForConsole.remove_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.ProtocolTypeGet">
            <summary>设置 CaseProtocolExecutionForConsole.get_ProtocolType() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.AllInstances.Clone">
            <summary>设置 CaseProtocolExecutionForConsole.Clone() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.AllInstances.ExecutionDeviceClose">
            <summary>设置 CaseProtocolExecutionForConsole.ExecutionDeviceClose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.AllInstances.ExecutionDeviceConnect">
            <summary>设置 CaseProtocolExecutionForConsole.ExecutionDeviceConnect() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.AllInstances.ExecutionDeviceRunICaseExecutionContentdelegateGetExecutiveDataStringActuatorStaticDataCollectionInt32">
            <summary>设置 CaseProtocolExecutionForConsole.ExecutionDeviceRun(ICaseExecutionContent yourExecutionContent, delegateGetExecutiveData yourExecutiveDelegate, String sender, ActuatorStaticDataCollection yourActuatorStaticDataCollection, Int32 caseId) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.AllInstances.IsDeviceConnectGet">
            <summary>设置 CaseProtocolExecutionForConsole.get_IsDeviceConnect() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.AllInstances.OnGetExecutiveDataAdddelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForConsole.add_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.AllInstances.OnGetExecutiveDataRemovedelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForConsole.remove_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForConsole.AllInstances.ProtocolTypeGet">
            <summary>设置 CaseProtocolExecutionForConsole.get_ProtocolType() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp">
            <summary>CaseExecutiveActuator.CaseProtocolExecutionForHttp 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.#ctor(CaseExecutiveActuator.CaseProtocolExecutionForHttp)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.Bind(CaseExecutiveActuator.ICaseExecutionDevice)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.Bind(System.ICloneable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.Clone">
            <summary>设置 CaseProtocolExecutionForHttp.Clone() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.ConstructormyConnectForHttp">
            <summary>设置 CaseProtocolExecutionForHttp.CaseProtocolExecutionForHttp(myConnectForHttp yourConnectInfo) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.ExecutionDeviceClose">
            <summary>设置 CaseProtocolExecutionForHttp.ExecutionDeviceClose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.ExecutionDeviceConnect">
            <summary>设置 CaseProtocolExecutionForHttp.ExecutionDeviceConnect() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.ExecutionDeviceRunICaseExecutionContentdelegateGetExecutiveDataStringActuatorStaticDataCollectionInt32">
            <summary>设置 CaseProtocolExecutionForHttp.ExecutionDeviceRun(ICaseExecutionContent yourExecutionContent, delegateGetExecutiveData yourExecutiveDelegate, String sender, ActuatorStaticDataCollection yourActuatorStaticDataCollection, Int32 caseId) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.GetRunContentXmlNode">
            <summary>设置 CaseProtocolExecutionForHttp.GetRunContent(XmlNode yourContentNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.IsDeviceConnectGet">
            <summary>设置 CaseProtocolExecutionForHttp.get_IsDeviceConnect() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.OnGetExecutiveDataAdddelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForHttp.add_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.OnGetExecutiveDataRemovedelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForHttp.remove_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.ProtocolTypeGet">
            <summary>设置 CaseProtocolExecutionForHttp.get_ProtocolType() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.AllInstances.Clone">
            <summary>设置 CaseProtocolExecutionForHttp.Clone() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.AllInstances.ExecutionDeviceClose">
            <summary>设置 CaseProtocolExecutionForHttp.ExecutionDeviceClose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.AllInstances.ExecutionDeviceConnect">
            <summary>设置 CaseProtocolExecutionForHttp.ExecutionDeviceConnect() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.AllInstances.ExecutionDeviceRunICaseExecutionContentdelegateGetExecutiveDataStringActuatorStaticDataCollectionInt32">
            <summary>设置 CaseProtocolExecutionForHttp.ExecutionDeviceRun(ICaseExecutionContent yourExecutionContent, delegateGetExecutiveData yourExecutiveDelegate, String sender, ActuatorStaticDataCollection yourActuatorStaticDataCollection, Int32 caseId) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.AllInstances.IsDeviceConnectGet">
            <summary>设置 CaseProtocolExecutionForHttp.get_IsDeviceConnect() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.AllInstances.OnGetExecutiveDataAdddelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForHttp.add_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.AllInstances.OnGetExecutiveDataRemovedelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForHttp.remove_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForHttp.AllInstances.ProtocolTypeGet">
            <summary>设置 CaseProtocolExecutionForHttp.get_ProtocolType() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql">
            <summary>CaseExecutiveActuator.CaseProtocolExecutionForMysql 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.#ctor(CaseExecutiveActuator.CaseProtocolExecutionForMysql)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.Bind(CaseExecutiveActuator.ICaseExecutionDevice)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.Bind(System.ICloneable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.Clone">
            <summary>设置 CaseProtocolExecutionForMysql.Clone() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.ConstructormyConnectForMysql">
            <summary>设置 CaseProtocolExecutionForMysql.CaseProtocolExecutionForMysql(myConnectForMysql yourConnectInfo) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.ExecutionDeviceClose">
            <summary>设置 CaseProtocolExecutionForMysql.ExecutionDeviceClose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.ExecutionDeviceConnect">
            <summary>设置 CaseProtocolExecutionForMysql.ExecutionDeviceConnect() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.ExecutionDeviceRunICaseExecutionContentdelegateGetExecutiveDataStringActuatorStaticDataCollectionInt32">
            <summary>设置 CaseProtocolExecutionForMysql.ExecutionDeviceRun(ICaseExecutionContent yourExecutionContent, delegateGetExecutiveData yourExecutiveDelegate, String sender, ActuatorStaticDataCollection yourActuatorStaticDataCollection, Int32 caseId) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.GetRunContentXmlNode">
            <summary>设置 CaseProtocolExecutionForMysql.GetRunContent(XmlNode yourContentNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.IsDeviceConnectGet">
            <summary>设置 CaseProtocolExecutionForMysql.get_IsDeviceConnect() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.OnGetExecutiveDataAdddelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForMysql.add_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.OnGetExecutiveDataRemovedelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForMysql.remove_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.ProtocolTypeGet">
            <summary>设置 CaseProtocolExecutionForMysql.get_ProtocolType() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.AllInstances.Clone">
            <summary>设置 CaseProtocolExecutionForMysql.Clone() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.AllInstances.ExecutionDeviceClose">
            <summary>设置 CaseProtocolExecutionForMysql.ExecutionDeviceClose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.AllInstances.ExecutionDeviceConnect">
            <summary>设置 CaseProtocolExecutionForMysql.ExecutionDeviceConnect() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.AllInstances.ExecutionDeviceRunICaseExecutionContentdelegateGetExecutiveDataStringActuatorStaticDataCollectionInt32">
            <summary>设置 CaseProtocolExecutionForMysql.ExecutionDeviceRun(ICaseExecutionContent yourExecutionContent, delegateGetExecutiveData yourExecutiveDelegate, String sender, ActuatorStaticDataCollection yourActuatorStaticDataCollection, Int32 caseId) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.AllInstances.IsDeviceConnectGet">
            <summary>设置 CaseProtocolExecutionForMysql.get_IsDeviceConnect() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.AllInstances.OnGetExecutiveDataAdddelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForMysql.add_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.AllInstances.OnGetExecutiveDataRemovedelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForMysql.remove_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForMysql.AllInstances.ProtocolTypeGet">
            <summary>设置 CaseProtocolExecutionForMysql.get_ProtocolType() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http">
            <summary>CaseExecutiveActuator.CaseProtocolExecutionForVanelife_http 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.#ctor(CaseExecutiveActuator.CaseProtocolExecutionForVanelife_http)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.Bind(CaseExecutiveActuator.ICaseExecutionDevice)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.Bind(System.ICloneable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.Clone">
            <summary>设置 CaseProtocolExecutionForVanelife_http.Clone() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.ConstructormyConnectForVanelife_http">
            <summary>设置 CaseProtocolExecutionForVanelife_http.CaseProtocolExecutionForVanelife_http(myConnectForVanelife_http yourConnectInfo) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.CreatVanelifeSendDataString">
            <summary>设置 CaseProtocolExecutionForVanelife_http.CreatVanelifeSendData(String testData) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.ExecutionDeviceClose">
            <summary>设置 CaseProtocolExecutionForVanelife_http.ExecutionDeviceClose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.ExecutionDeviceConnect">
            <summary>设置 CaseProtocolExecutionForVanelife_http.ExecutionDeviceConnect() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.ExecutionDeviceRunICaseExecutionContentdelegateGetExecutiveDataStringActuatorStaticDataCollectionInt32">
            <summary>设置 CaseProtocolExecutionForVanelife_http.ExecutionDeviceRun(ICaseExecutionContent yourExecutionContent, delegateGetExecutiveData yourExecutiveDelegate, String sender, ActuatorStaticDataCollection yourActuatorStaticDataCollection, Int32 caseId) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.GetRunContentXmlNode">
            <summary>设置 CaseProtocolExecutionForVanelife_http.GetRunContent(XmlNode yourContentNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.IsDeviceConnectGet">
            <summary>设置 CaseProtocolExecutionForVanelife_http.get_IsDeviceConnect() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.OnGetExecutiveDataAdddelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForVanelife_http.add_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.OnGetExecutiveDataRemovedelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForVanelife_http.remove_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.ProtocolTypeGet">
            <summary>设置 CaseProtocolExecutionForVanelife_http.get_ProtocolType() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.AllInstances.Clone">
            <summary>设置 CaseProtocolExecutionForVanelife_http.Clone() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.AllInstances.CreatVanelifeSendDataString">
            <summary>设置 CaseProtocolExecutionForVanelife_http.CreatVanelifeSendData(String testData) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.AllInstances.ExecutionDeviceClose">
            <summary>设置 CaseProtocolExecutionForVanelife_http.ExecutionDeviceClose() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.AllInstances.ExecutionDeviceConnect">
            <summary>设置 CaseProtocolExecutionForVanelife_http.ExecutionDeviceConnect() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.AllInstances.ExecutionDeviceRunICaseExecutionContentdelegateGetExecutiveDataStringActuatorStaticDataCollectionInt32">
            <summary>设置 CaseProtocolExecutionForVanelife_http.ExecutionDeviceRun(ICaseExecutionContent yourExecutionContent, delegateGetExecutiveData yourExecutiveDelegate, String sender, ActuatorStaticDataCollection yourActuatorStaticDataCollection, Int32 caseId) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.AllInstances.IsDeviceConnectGet">
            <summary>设置 CaseProtocolExecutionForVanelife_http.get_IsDeviceConnect() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.AllInstances.OnGetExecutiveDataAdddelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForVanelife_http.add_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.AllInstances.OnGetExecutiveDataRemovedelegateGetExecutiveData">
            <summary>设置 CaseProtocolExecutionForVanelife_http.remove_OnGetExecutiveData(delegateGetExecutiveData value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseProtocolExecutionForVanelife_http.AllInstances.ProtocolTypeGet">
            <summary>设置 CaseProtocolExecutionForVanelife_http.get_ProtocolType() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimCaseTool">
            <summary>CaseExecutiveActuator.CaseTool 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseTool.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseTool.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseTool.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimCaseTool.getCaseRunDataOf1XmlNode``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Xml.XmlNode,CaseExecutiveActuator.MyRunCaseData{``0}})">
            <summary>设置 CaseTool.getCaseRunData(XmlNode sourceNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.CheckBackDataStringStringCaseExpectType">
            <summary>设置 CaseTool.CheckBackData(String BackData, String ExpectData, CaseExpectType method) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.CheckBackDataStringStringString">
            <summary>设置 CaseTool.CheckBackData(String BackData, String ExpectData, String method) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.CheckCaseXmlNodeStringStringArray">
            <summary>设置 CaseTool.CheckCase(XmlNode sourceNode, String targetKey, String[] targetValue) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.GetCurrentParametersDataStringStringActuatorStaticDataCollectionNameValueCollectionStringOut">
            <summary>设置 CaseTool.GetCurrentParametersData(String yourSourceData, String splitStr, ActuatorStaticDataCollection yourActuatorStaticDataCollection, NameValueCollection yourDataResultCollection, String&amp; errorMessage) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.GetFullPathStringString">
            <summary>设置 CaseTool.GetFullPath(String path, String depthPath) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.GetJTokenValueExJTokenString">
            <summary>设置 CaseTool.GetJTokenValueEx(JToken yourJToken, String yourKey) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.GetJTokenValueJTokenString">
            <summary>设置 CaseTool.GetJTokenValue(JToken yourJToken, String yourKey) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.GetStrPickDataStringStringOutInt32Out">
            <summary>设置 CaseTool.GetStrPickData(String yourSouce, String&amp; yourTarget, Int32&amp; yourStrLen) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.GetXmlInnerMetaDataListExXmlNodeStringStringArray">
            <summary>设置 CaseTool.GetXmlInnerMetaDataListEx(XmlNode sourseNode, String tagName, String[] tagAttributes) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.GetXmlInnerMetaDataListXmlNodeStringStringArray">
            <summary>设置 CaseTool.GetXmlInnerMetaDataList(XmlNode sourseNode, String tagName, String[] tagAttributes) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.PickJsonParameterStringString">
            <summary>设置 CaseTool.PickJsonParameter(String yourTarget, String yourSouce) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.PickStrParameterStringInt32String">
            <summary>设置 CaseTool.PickStrParameter(String yourTarget, Int32 yourStrLen, String yourSouce) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.PickXmlParameterStringString">
            <summary>设置 CaseTool.PickXmlParameter(String yourTarget, String yourSouce) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.StaticConstructor">
            <summary>设置 CaseTool.CaseTool() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.TryGetParametersAdditionDataStringStringOut">
            <summary>设置 CaseTool.TryGetParametersAdditionData(String souceData, String&amp; additionData) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.getCaseProtocolXmlNode">
            <summary>设置 CaseTool.getCaseProtocol(XmlNode sourceNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.getTargetCaseIDStringInt32OutInt32Out">
            <summary>设置 CaseTool.getTargetCaseID(String yourData, Int32&amp; PorjectID, Int32&amp; CaseID) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.getXmlAttributeVauleExXmlNodeString">
            <summary>设置 CaseTool.getXmlAttributeVauleEx(XmlNode sourceNode, String tagAttribute) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.getXmlAttributeVauleXmlNodeString">
            <summary>设置 CaseTool.getXmlAttributeVaule(XmlNode sourceNode, String tagAttribute) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.getXmlAttributeVauleXmlNodeStringString">
            <summary>设置 CaseTool.getXmlAttributeVaule(XmlNode sourceNode, String tagAttribute, String nullData) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.getXmlInnerVauleExXmlNodeString">
            <summary>设置 CaseTool.getXmlInnerVauleEx(XmlNode sourceNode, String tagName) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.getXmlInnerVauleXmlNodeString">
            <summary>设置 CaseTool.getXmlInnerVaule(XmlNode sourceNode, String tagName) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.getXmlParametContentXmlNode">
            <summary>设置 CaseTool.getXmlParametContent(XmlNode sourceNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimCaseTool.getXmlParametContentXmlNodeString">
            <summary>设置 CaseTool.getXmlParametContent(XmlNode sourceNode, String tagName) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimHttpAisleConfig">
            <summary>CaseExecutiveActuator.HttpAisleConfig 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimHttpAisleConfig.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimHttpAisleConfig.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimHttpAisleConfig.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimHttpAisleConfig.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimHttpAisleConfig.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimHttpMultipart">
            <summary>CaseExecutiveActuator.HttpMultipart 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimHttpMultipart.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimHttpMultipart.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimHttpMultipart.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimHttpMultipart.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimHttpMultipart.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent">
            <summary>CaseExecutiveActuator.MyActiveMQExecutionContent 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.#ctor(CaseExecutiveActuator.MyActiveMQExecutionContent)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.Bind(CaseExecutiveActuator.ICaseExecutionContent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.Constructor">
            <summary>设置 MyActiveMQExecutionContent.MyActiveMQExecutionContent() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.MyCaseActuatorGet">
            <summary>设置 MyActiveMQExecutionContent.get_MyCaseActuator() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.MyCaseProtocolGet">
            <summary>设置 MyActiveMQExecutionContent.get_MyCaseProtocol() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.MyErrorMessageGet">
            <summary>设置 MyActiveMQExecutionContent.get_MyErrorMessage() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.MyExecutionContentGet">
            <summary>设置 MyActiveMQExecutionContent.get_MyExecutionContent() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.MyExecutionTargetGet">
            <summary>设置 MyActiveMQExecutionContent.get_MyExecutionTarget() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.AllInstances.MyCaseActuatorGet">
            <summary>设置 MyActiveMQExecutionContent.get_MyCaseActuator() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.AllInstances.MyCaseProtocolGet">
            <summary>设置 MyActiveMQExecutionContent.get_MyCaseProtocol() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.AllInstances.MyErrorMessageGet">
            <summary>设置 MyActiveMQExecutionContent.get_MyErrorMessage() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.AllInstances.MyExecutionContentGet">
            <summary>设置 MyActiveMQExecutionContent.get_MyExecutionContent() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.AllInstances.MyExecutionTargetGet">
            <summary>设置 MyActiveMQExecutionContent.get_MyExecutionTarget() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimConsumerData">
            <summary>CaseExecutiveActuator.MyActiveMQExecutionContent+ConsumerData 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimConsumerData.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimConsumerData.#ctor(CaseExecutiveActuator.MyActiveMQExecutionContent.ConsumerData)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimConsumerData.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimConsumerData.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimConsumerData.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimConsumerData.ConstructorStringStringString">
            <summary>设置 ConsumerData.ConsumerData(String name, String type, String durable) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimConsumerData.ConsumerNameGet">
            <summary>设置 ConsumerData.get_ConsumerName() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimConsumerData.ConsumerNameSetString">
            <summary>设置 ConsumerData.set_ConsumerName(String value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimConsumerData.ConsumerTopicDurableGet">
            <summary>设置 ConsumerData.get_ConsumerTopicDurable() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimConsumerData.ConsumerTopicDurableSetString">
            <summary>设置 ConsumerData.set_ConsumerTopicDurable(String value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimConsumerData.ConsumerTypeGet">
            <summary>设置 ConsumerData.get_ConsumerType() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimConsumerData.ConsumerTypeSetString">
            <summary>设置 ConsumerData.set_ConsumerType(String value) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimConsumerData.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimConsumerData.AllInstances.ConsumerNameGet">
            <summary>设置 ConsumerData.get_ConsumerName() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimConsumerData.AllInstances.ConsumerNameSetString">
            <summary>设置 ConsumerData.set_ConsumerName(String value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimConsumerData.AllInstances.ConsumerTopicDurableGet">
            <summary>设置 ConsumerData.get_ConsumerTopicDurable() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimConsumerData.AllInstances.ConsumerTopicDurableSetString">
            <summary>设置 ConsumerData.set_ConsumerTopicDurable(String value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimConsumerData.AllInstances.ConsumerTypeGet">
            <summary>设置 ConsumerData.get_ConsumerType() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimConsumerData.AllInstances.ConsumerTypeSetString">
            <summary>设置 ConsumerData.set_ConsumerType(String value) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimProducerData">
            <summary>CaseExecutiveActuator.MyActiveMQExecutionContent+ProducerData 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimProducerData.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimProducerData.#ctor(CaseExecutiveActuator.MyActiveMQExecutionContent.ProducerData)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimProducerData.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimProducerData.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimProducerData.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimProducerData.ConstructorStringStringString">
            <summary>设置 ProducerData.ProducerData(String name, String type, String messageType) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimProducerData.MessageTypeGet">
            <summary>设置 ProducerData.get_MessageType() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimProducerData.MessageTypeSetString">
            <summary>设置 ProducerData.set_MessageType(String value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimProducerData.ProducerNameGet">
            <summary>设置 ProducerData.get_ProducerName() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimProducerData.ProducerNameSetString">
            <summary>设置 ProducerData.set_ProducerName(String value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimProducerData.ProducerTypeGet">
            <summary>设置 ProducerData.get_ProducerType() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimProducerData.ProducerTypeSetString">
            <summary>设置 ProducerData.set_ProducerType(String value) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimProducerData.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimProducerData.AllInstances.MessageTypeGet">
            <summary>设置 ProducerData.get_MessageType() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimProducerData.AllInstances.MessageTypeSetString">
            <summary>设置 ProducerData.set_MessageType(String value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimProducerData.AllInstances.ProducerNameGet">
            <summary>设置 ProducerData.get_ProducerName() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimProducerData.AllInstances.ProducerNameSetString">
            <summary>设置 ProducerData.set_ProducerName(String value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimProducerData.AllInstances.ProducerTypeGet">
            <summary>设置 ProducerData.get_ProducerType() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyActiveMQExecutionContent.ShimProducerData.AllInstances.ProducerTypeSetString">
            <summary>设置 ProducerData.set_ProducerType(String value) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyBasicHttpExecutionContent">
            <summary>CaseExecutiveActuator.MyBasicHttpExecutionContent 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyBasicHttpExecutionContent.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyBasicHttpExecutionContent.#ctor(CaseExecutiveActuator.MyBasicHttpExecutionContent)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyBasicHttpExecutionContent.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyBasicHttpExecutionContent.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyBasicHttpExecutionContent.Bind(CaseExecutiveActuator.ICaseExecutionContent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyBasicHttpExecutionContent.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyBasicHttpExecutionContent.Constructor">
            <summary>设置 MyBasicHttpExecutionContent.MyBasicHttpExecutionContent() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyBasicHttpExecutionContent.MyCaseActuatorGet">
            <summary>设置 MyBasicHttpExecutionContent.get_MyCaseActuator() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyBasicHttpExecutionContent.MyCaseProtocolGet">
            <summary>设置 MyBasicHttpExecutionContent.get_MyCaseProtocol() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyBasicHttpExecutionContent.MyErrorMessageGet">
            <summary>设置 MyBasicHttpExecutionContent.get_MyErrorMessage() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyBasicHttpExecutionContent.MyExecutionContentGet">
            <summary>设置 MyBasicHttpExecutionContent.get_MyExecutionContent() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyBasicHttpExecutionContent.MyExecutionTargetGet">
            <summary>设置 MyBasicHttpExecutionContent.get_MyExecutionTarget() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyBasicHttpExecutionContent.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyBasicHttpExecutionContent.AllInstances.MyCaseActuatorGet">
            <summary>设置 MyBasicHttpExecutionContent.get_MyCaseActuator() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyBasicHttpExecutionContent.AllInstances.MyCaseProtocolGet">
            <summary>设置 MyBasicHttpExecutionContent.get_MyCaseProtocol() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyBasicHttpExecutionContent.AllInstances.MyErrorMessageGet">
            <summary>设置 MyBasicHttpExecutionContent.get_MyErrorMessage() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyBasicHttpExecutionContent.AllInstances.MyExecutionContentGet">
            <summary>设置 MyBasicHttpExecutionContent.get_MyExecutionContent() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyBasicHttpExecutionContent.AllInstances.MyExecutionTargetGet">
            <summary>设置 MyBasicHttpExecutionContent.get_MyExecutionTarget() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine">
            <summary>CaseExecutiveActuator.MyCaseDataTypeEngine 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.#ctor(CaseExecutiveActuator.MyCaseDataTypeEngine)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.Constructor">
            <summary>设置 MyCaseDataTypeEngine.MyCaseDataTypeEngine() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.GetCsvStaticDataSourceIRunTimeDataSourceOutStringOutString">
            <summary>设置 MyCaseDataTypeEngine.GetCsvStaticDataSource(IRunTimeDataSource&amp; yourStaticData, String&amp; errorMes, String yourFormatData) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.GetIndexStaticDataIRunTimeStaticDataOutStringOutString">
            <summary>设置 MyCaseDataTypeEngine.GetIndexStaticData(IRunTimeStaticData&amp; yourStaticData, String&amp; errorMes, String yourFormatData) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.GetListStaticDataIRunTimeStaticDataOutStringOutString">
            <summary>设置 MyCaseDataTypeEngine.GetListStaticData(IRunTimeStaticData&amp; yourStaticData, String&amp; errorMes, String yourFormatData) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.GetLongStaticDataIRunTimeStaticDataOutStringOutString">
            <summary>设置 MyCaseDataTypeEngine.GetLongStaticData(IRunTimeStaticData&amp; yourStaticData, String&amp; errorMes, String yourFormatData) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.GetRandomStaticDataIRunTimeStaticDataOutStringOutString">
            <summary>设置 MyCaseDataTypeEngine.GetRandomStaticData(IRunTimeStaticData&amp; yourStaticData, String&amp; errorMes, String yourFormatData) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.GetStrIndexStaticDataIRunTimeStaticDataOutStringOutString">
            <summary>设置 MyCaseDataTypeEngine.GetStrIndexStaticData(IRunTimeStaticData&amp; yourStaticData, String&amp; errorMes, String yourFormatData) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.GetTimeStaticDataIRunTimeStaticDataOutStringOutString">
            <summary>设置 MyCaseDataTypeEngine.GetTimeStaticData(IRunTimeStaticData&amp; yourStaticData, String&amp; errorMes, String yourFormatData) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.StaticConstructor">
            <summary>设置 MyCaseDataTypeEngine.MyCaseDataTypeEngine() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyCaseDataTypeEngine.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime">
            <summary>CaseExecutiveActuator.MyCaseRunTime 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.#ctor(CaseExecutiveActuator.MyCaseRunTime)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.Constructor">
            <summary>设置 MyCaseRunTime.MyCaseRunTime() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.GetNowCountProgressGet">
            <summary>设置 MyCaseRunTime.get_GetNowCountProgress() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.OnLoopChangeEventAdddelegateLoopChangeEventHandler">
            <summary>设置 MyCaseRunTime.add_OnLoopChangeEvent(delegateLoopChangeEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.OnLoopChangeEventRemovedelegateLoopChangeEventHandler">
            <summary>设置 MyCaseRunTime.remove_OnLoopChangeEvent(delegateLoopChangeEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.OnQueueChangeEventAdddelegateQueueChangeEventHandler">
            <summary>设置 MyCaseRunTime.add_OnQueueChangeEvent(delegateQueueChangeEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.OnQueueChangeEventRemovedelegateQueueChangeEventHandler">
            <summary>设置 MyCaseRunTime.remove_OnQueueChangeEvent(delegateQueueChangeEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.ReportQueueActionCaseCellString">
            <summary>设置 MyCaseRunTime.ReportQueueAction(CaseCell yourTarget, String yourMessage) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.gotoMyCaseInt32Int32DictionaryOfInt32DictionaryOfInt32CaseCell">
            <summary>设置 MyCaseRunTime.gotoMyCase(Int32 yourProjectId, Int32 yourCaseId, Dictionary`2&lt;Int32,Dictionary`2&lt;Int32,CaseCell&gt;&gt; myRunTimeCaseDictionary) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.nextCase">
            <summary>设置 MyCaseRunTime.nextCase() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.readyStartCaseCell">
            <summary>设置 MyCaseRunTime.readyStart(CaseCell yourStartCase) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.readyStartCaseCellBoolean">
            <summary>设置 MyCaseRunTime.readyStart(CaseCell yourStartCase, Boolean yourIsThrough) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.AllInstances.GetNowCountProgressGet">
            <summary>设置 MyCaseRunTime.get_GetNowCountProgress() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.AllInstances.OnLoopChangeEventAdddelegateLoopChangeEventHandler">
            <summary>设置 MyCaseRunTime.add_OnLoopChangeEvent(delegateLoopChangeEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.AllInstances.OnLoopChangeEventRemovedelegateLoopChangeEventHandler">
            <summary>设置 MyCaseRunTime.remove_OnLoopChangeEvent(delegateLoopChangeEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.AllInstances.OnQueueChangeEventAdddelegateQueueChangeEventHandler">
            <summary>设置 MyCaseRunTime.add_OnQueueChangeEvent(delegateQueueChangeEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.AllInstances.OnQueueChangeEventRemovedelegateQueueChangeEventHandler">
            <summary>设置 MyCaseRunTime.remove_OnQueueChangeEvent(delegateQueueChangeEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.AllInstances.ReportQueueActionCaseCellString">
            <summary>设置 MyCaseRunTime.ReportQueueAction(CaseCell yourTarget, String yourMessage) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.AllInstances.gotoMyCaseInt32Int32DictionaryOfInt32DictionaryOfInt32CaseCell">
            <summary>设置 MyCaseRunTime.gotoMyCase(Int32 yourProjectId, Int32 yourCaseId, Dictionary`2&lt;Int32,Dictionary`2&lt;Int32,CaseCell&gt;&gt; myRunTimeCaseDictionary) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.AllInstances.nextCase">
            <summary>设置 MyCaseRunTime.nextCase() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.AllInstances.readyStartCaseCell">
            <summary>设置 MyCaseRunTime.readyStart(CaseCell yourStartCase) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseRunTime.AllInstances.readyStartCaseCellBoolean">
            <summary>设置 MyCaseRunTime.readyStart(CaseCell yourStartCase, Boolean yourIsThrough) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyCaseScriptAnalysisEngine">
            <summary>CaseExecutiveActuator.MyCaseScriptAnalysisEngine 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseScriptAnalysisEngine.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseScriptAnalysisEngine.#ctor(CaseExecutiveActuator.MyCaseScriptAnalysisEngine)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseScriptAnalysisEngine.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCaseScriptAnalysisEngine.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseScriptAnalysisEngine.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseScriptAnalysisEngine.Constructor">
            <summary>设置 MyCaseScriptAnalysisEngine.MyCaseScriptAnalysisEngine() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseScriptAnalysisEngine.getCaseLoadInfoMyRunCaseDataOfICaseExecutionContent">
            <summary>设置 MyCaseScriptAnalysisEngine.getCaseLoadInfo(MyRunCaseData`1&lt;ICaseExecutionContent&gt; runCaseData) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseScriptAnalysisEngine.getCaseLoadInfoXmlNode">
            <summary>设置 MyCaseScriptAnalysisEngine.getCaseLoadInfo(XmlNode sourceNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCaseScriptAnalysisEngine.getCaseRunDataXmlNode">
            <summary>设置 MyCaseScriptAnalysisEngine.getCaseRunData(XmlNode sourceNode) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyCaseScriptAnalysisEngine.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyCelerityCaseRunTime">
            <summary>CaseExecutiveActuator.MyCelerityCaseRunTime 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCelerityCaseRunTime.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCelerityCaseRunTime.#ctor(CaseExecutiveActuator.MyCelerityCaseRunTime)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCelerityCaseRunTime.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyCelerityCaseRunTime.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCelerityCaseRunTime.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCelerityCaseRunTime.ConstructorDictionaryOfInt32DictionaryOfInt32TreeNode">
            <summary>设置 MyCelerityCaseRunTime.MyCelerityCaseRunTime(Dictionary`2&lt;Int32,Dictionary`2&lt;Int32,TreeNode&gt;&gt; yourCaseDictionary) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCelerityCaseRunTime.gotoMyCaseInt32Int32">
            <summary>设置 MyCelerityCaseRunTime.gotoMyCase(Int32 yourProjectId, Int32 yourCaseId) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCelerityCaseRunTime.nextCase">
            <summary>设置 MyCelerityCaseRunTime.nextCase() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCelerityCaseRunTime.readyStartTreeNode">
            <summary>设置 MyCelerityCaseRunTime.readyStart(TreeNode yourStartCase) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCelerityCaseRunTime.readyStartTreeNodeBoolean">
            <summary>设置 MyCelerityCaseRunTime.readyStart(TreeNode yourStartCase, Boolean yourIsThrough) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCelerityCaseRunTime.updataRunTimeCaseDictionaryDictionaryOfInt32DictionaryOfInt32TreeNode">
            <summary>设置 MyCelerityCaseRunTime.updataRunTimeCaseDictionary(Dictionary`2&lt;Int32,Dictionary`2&lt;Int32,TreeNode&gt;&gt; yourCaseDictionary) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyCelerityCaseRunTime.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCelerityCaseRunTime.AllInstances.gotoMyCaseInt32Int32">
            <summary>设置 MyCelerityCaseRunTime.gotoMyCase(Int32 yourProjectId, Int32 yourCaseId) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCelerityCaseRunTime.AllInstances.nextCase">
            <summary>设置 MyCelerityCaseRunTime.nextCase() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCelerityCaseRunTime.AllInstances.readyStartTreeNode">
            <summary>设置 MyCelerityCaseRunTime.readyStart(TreeNode yourStartCase) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCelerityCaseRunTime.AllInstances.readyStartTreeNodeBoolean">
            <summary>设置 MyCelerityCaseRunTime.readyStart(TreeNode yourStartCase, Boolean yourIsThrough) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyCelerityCaseRunTime.AllInstances.updataRunTimeCaseDictionaryDictionaryOfInt32DictionaryOfInt32TreeNode">
            <summary>设置 MyCelerityCaseRunTime.updataRunTimeCaseDictionary(Dictionary`2&lt;Int32,Dictionary`2&lt;Int32,TreeNode&gt;&gt; yourCaseDictionary) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyConfiguration">
            <summary>CaseExecutiveActuator.MyConfiguration 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyConfiguration.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyConfiguration.#ctor(CaseExecutiveActuator.MyConfiguration)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyConfiguration.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyConfiguration.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConfiguration.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConfiguration.Constructor">
            <summary>设置 MyConfiguration.MyConfiguration() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConfiguration.StaticConstructor">
            <summary>设置 MyConfiguration.MyConfiguration() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyConfiguration.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent">
            <summary>CaseExecutiveActuator.MyConsoleExecutionContent 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.#ctor(CaseExecutiveActuator.MyConsoleExecutionContent)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.Bind(CaseExecutiveActuator.ICaseExecutionContent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.Constructor">
            <summary>设置 MyConsoleExecutionContent.MyConsoleExecutionContent() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.MyCaseActuatorGet">
            <summary>设置 MyConsoleExecutionContent.get_MyCaseActuator() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.MyCaseProtocolGet">
            <summary>设置 MyConsoleExecutionContent.get_MyCaseProtocol() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.MyErrorMessageGet">
            <summary>设置 MyConsoleExecutionContent.get_MyErrorMessage() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.MyExecutionContentGet">
            <summary>设置 MyConsoleExecutionContent.get_MyExecutionContent() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.MyExecutionTargetGet">
            <summary>设置 MyConsoleExecutionContent.get_MyExecutionTarget() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.AllInstances.MyCaseActuatorGet">
            <summary>设置 MyConsoleExecutionContent.get_MyCaseActuator() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.AllInstances.MyCaseProtocolGet">
            <summary>设置 MyConsoleExecutionContent.get_MyCaseProtocol() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.AllInstances.MyErrorMessageGet">
            <summary>设置 MyConsoleExecutionContent.get_MyErrorMessage() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.AllInstances.MyExecutionContentGet">
            <summary>设置 MyConsoleExecutionContent.get_MyExecutionContent() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.AllInstances.MyExecutionTargetGet">
            <summary>设置 MyConsoleExecutionContent.get_MyExecutionTarget() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.ShimStaticDataAdd">
            <summary>CaseExecutiveActuator.MyConsoleExecutionContent+StaticDataAdd 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.ShimStaticDataAdd.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.ShimStaticDataAdd.#ctor(CaseExecutiveActuator.MyConsoleExecutionContent.StaticDataAdd)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.ShimStaticDataAdd.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.ShimStaticDataAdd.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.ShimStaticDataAdd.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.ShimStaticDataAdd.ConfigureDataGet">
            <summary>设置 StaticDataAdd.get_ConfigureData() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.ShimStaticDataAdd.ConfigureDataSetcaseParameterizationContent">
            <summary>设置 StaticDataAdd.set_ConfigureData(caseParameterizationContent value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.ShimStaticDataAdd.ConstructorCaseStaticDataTypeStringcaseParameterizationContent">
            <summary>设置 StaticDataAdd.StaticDataAdd(CaseStaticDataType yourStaticDataType, String yourName, caseParameterizationContent yourConfigureData) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.ShimStaticDataAdd.NameGet">
            <summary>设置 StaticDataAdd.get_Name() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.ShimStaticDataAdd.NameSetString">
            <summary>设置 StaticDataAdd.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.ShimStaticDataAdd.StaticDataTypeGet">
            <summary>设置 StaticDataAdd.get_StaticDataType() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.ShimStaticDataAdd.StaticDataTypeSetCaseStaticDataType">
            <summary>设置 StaticDataAdd.set_StaticDataType(CaseStaticDataType value) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.ShimStaticDataAdd.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.ShimStaticDataAdd.AllInstances.ConfigureDataGet">
            <summary>设置 StaticDataAdd.get_ConfigureData() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.ShimStaticDataAdd.AllInstances.ConfigureDataSetcaseParameterizationContent">
            <summary>设置 StaticDataAdd.set_ConfigureData(caseParameterizationContent value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.ShimStaticDataAdd.AllInstances.NameGet">
            <summary>设置 StaticDataAdd.get_Name() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.ShimStaticDataAdd.AllInstances.NameSetString">
            <summary>设置 StaticDataAdd.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.ShimStaticDataAdd.AllInstances.StaticDataTypeGet">
            <summary>设置 StaticDataAdd.get_StaticDataType() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyConsoleExecutionContent.ShimStaticDataAdd.AllInstances.StaticDataTypeSetCaseStaticDataType">
            <summary>设置 StaticDataAdd.set_StaticDataType(CaseStaticDataType value) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyExecutionDeviceResult">
            <summary>CaseExecutiveActuator.MyExecutionDeviceResult 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyExecutionDeviceResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyExecutionDeviceResult.#ctor(CaseExecutiveActuator.MyExecutionDeviceResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyExecutionDeviceResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyExecutionDeviceResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyExecutionDeviceResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyExecutionDeviceResult.Constructor">
            <summary>设置 MyExecutionDeviceResult.MyExecutionDeviceResult() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyExecutionDeviceResult.ConstructorCaseProtocolStringStringString">
            <summary>设置 MyExecutionDeviceResult.MyExecutionDeviceResult(CaseProtocol yourCaseProtocol, String yourSpanTime, String yourStartTime, String yourBackContent) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyExecutionDeviceResult.ConstructorCaseProtocolStringStringStringString">
            <summary>设置 MyExecutionDeviceResult.MyExecutionDeviceResult(CaseProtocol yourCaseProtocol, String yourSpanTime, String yourStartTime, String yourBackContent, String yourAdditionalContent) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyExecutionDeviceResult.ConstructorInt32String">
            <summary>设置 MyExecutionDeviceResult.MyExecutionDeviceResult(Int32 yourCaseId, String yourAdditionalError) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyExecutionDeviceResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyExtensionMethods">
            <summary>CaseExecutiveActuator.MyExtensionMethods 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyExtensionMethods.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyExtensionMethods.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyExtensionMethods.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyExtensionMethods.MyAddOf1DictionaryOfStringM0StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Collections.Generic.Dictionary{System.String,``0},System.String,``0})">
            <summary>设置 MyExtensionMethods.MyAdd(Dictionary`2&lt;String,!!0&gt; dc, String yourKey, !!0 yourValue) 的 填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyExtensionMethods.MyCloneOf2DictionaryOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1}})">
            <summary>设置 MyExtensionMethods.MyClone(Dictionary`2&lt;!!0,!!1&gt; dc) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyExtensionMethods.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyExtensionMethods.MyAddDictionaryOfStringICaseExecutionDeviceStringICaseExecutionDevice">
            <summary>设置 MyExtensionMethods.MyAdd(Dictionary`2&lt;String,ICaseExecutionDevice&gt; dc, String yourKey, ICaseExecutionDevice yourValue) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyExtensionMethods.MyAddDictionaryOfStringIRunTimeStaticDataStringIRunTimeStaticData">
            <summary>设置 MyExtensionMethods.MyAdd(Dictionary`2&lt;String,IRunTimeStaticData&gt; dc, String yourKey, IRunTimeStaticData yourValue) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyExtensionMethods.MyCloneDictionaryOfStringICloneable">
            <summary>设置 MyExtensionMethods.MyClone(Dictionary`2&lt;String,ICloneable&gt; dc) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyExtensionMethods.MyCloneListOfIRunTimeStaticData">
            <summary>设置 MyExtensionMethods.MyClone(List`1&lt;IRunTimeStaticData&gt; lt) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyExtensionMethods.MyToStringListOfStringString">
            <summary>设置 MyExtensionMethods.MyToString(List`1&lt;String&gt; lsStr, String splitStr) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyMySqlExecutionContent">
            <summary>CaseExecutiveActuator.MyMySqlExecutionContent 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyMySqlExecutionContent.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyMySqlExecutionContent.#ctor(CaseExecutiveActuator.MyMySqlExecutionContent)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyMySqlExecutionContent.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyMySqlExecutionContent.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyMySqlExecutionContent.Bind(CaseExecutiveActuator.ICaseExecutionContent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyMySqlExecutionContent.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyMySqlExecutionContent.Constructor">
            <summary>设置 MyMySqlExecutionContent.MyMySqlExecutionContent() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyMySqlExecutionContent.MyCaseActuatorGet">
            <summary>设置 MyMySqlExecutionContent.get_MyCaseActuator() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyMySqlExecutionContent.MyCaseProtocolGet">
            <summary>设置 MyMySqlExecutionContent.get_MyCaseProtocol() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyMySqlExecutionContent.MyErrorMessageGet">
            <summary>设置 MyMySqlExecutionContent.get_MyErrorMessage() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyMySqlExecutionContent.MyExecutionContentGet">
            <summary>设置 MyMySqlExecutionContent.get_MyExecutionContent() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyMySqlExecutionContent.MyExecutionTargetGet">
            <summary>设置 MyMySqlExecutionContent.get_MyExecutionTarget() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyMySqlExecutionContent.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyMySqlExecutionContent.AllInstances.MyCaseActuatorGet">
            <summary>设置 MyMySqlExecutionContent.get_MyCaseActuator() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyMySqlExecutionContent.AllInstances.MyCaseProtocolGet">
            <summary>设置 MyMySqlExecutionContent.get_MyCaseProtocol() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyMySqlExecutionContent.AllInstances.MyErrorMessageGet">
            <summary>设置 MyMySqlExecutionContent.get_MyErrorMessage() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyMySqlExecutionContent.AllInstances.MyExecutionContentGet">
            <summary>设置 MyMySqlExecutionContent.get_MyExecutionContent() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyMySqlExecutionContent.AllInstances.MyExecutionTargetGet">
            <summary>设置 MyMySqlExecutionContent.get_MyExecutionTarget() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyRunCaseData`1">
            <summary>CaseExecutiveActuator.MyRunCaseData`1 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyRunCaseData`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyRunCaseData`1.#ctor(CaseExecutiveActuator.MyRunCaseData{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyRunCaseData`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyRunCaseData`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyRunCaseData`1.AddCaseActionCaseResultCaseActionDescription">
            <summary>设置 MyRunCaseData`1.AddCaseAction(CaseResult yourCaseResult, CaseActionDescription yourDescription) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyRunCaseData`1.AddErrorMessageString">
            <summary>设置 MyRunCaseData`1.AddErrorMessage(String yourErrorMessage) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyRunCaseData`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyRunCaseData`1.Constructor">
            <summary>设置 MyRunCaseData`1.MyRunCaseData`1() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyRunCaseData`1.ConstructorT0Int32CaseProtocol">
            <summary>设置 MyRunCaseData`1.MyRunCaseData`1(!0 yourContent, Int32 yourId, CaseProtocol yourcontentProtocol) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyRunCaseData`1.ConstructorT0Int32CaseProtocolString">
            <summary>设置 MyRunCaseData`1.MyRunCaseData`1(!0 yourContent, Int32 yourId, CaseProtocol yourcontentProtocol, String yourErrorMessage) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyRunCaseData`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyRunCaseData`1.AllInstances.AddCaseActionCaseResultCaseActionDescription">
            <summary>设置 MyRunCaseData`1.AddCaseAction(CaseResult yourCaseResult, CaseActionDescription yourDescription) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyRunCaseData`1.AllInstances.AddErrorMessageString">
            <summary>设置 MyRunCaseData`1.AddErrorMessage(String yourErrorMessage) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataIndex">
            <summary>CaseExecutiveActuator.MyStaticDataIndex 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataIndex.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataIndex.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataIndex.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyStaticDataIndex.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataIndex.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataList">
            <summary>CaseExecutiveActuator.MyStaticDataList 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataList.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataList.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataList.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyStaticDataList.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataList.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataLong">
            <summary>CaseExecutiveActuator.MyStaticDataLong 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataLong.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataLong.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataLong.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyStaticDataLong.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataLong.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataNowTime">
            <summary>CaseExecutiveActuator.MyStaticDataNowTime 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataNowTime.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataNowTime.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataNowTime.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyStaticDataNowTime.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataNowTime.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataRandomStr">
            <summary>CaseExecutiveActuator.MyStaticDataRandomStr 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataRandomStr.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataRandomStr.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataRandomStr.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyStaticDataRandomStr.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataRandomStr.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataSourceCsv">
            <summary>CaseExecutiveActuator.MyStaticDataSourceCsv 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataSourceCsv.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataSourceCsv.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataSourceCsv.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyStaticDataSourceCsv.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataSourceCsv.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataStrIndex">
            <summary>CaseExecutiveActuator.MyStaticDataStrIndex 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataStrIndex.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataStrIndex.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyStaticDataStrIndex.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyStaticDataStrIndex.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyStaticDataStrIndex.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyVaneHttpExecutionContent">
            <summary>CaseExecutiveActuator.MyVaneHttpExecutionContent 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyVaneHttpExecutionContent.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyVaneHttpExecutionContent.#ctor(CaseExecutiveActuator.MyVaneHttpExecutionContent)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyVaneHttpExecutionContent.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyVaneHttpExecutionContent.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimMyVaneHttpExecutionContent.Bind(CaseExecutiveActuator.ICaseExecutionContent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyVaneHttpExecutionContent.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyVaneHttpExecutionContent.Constructor">
            <summary>设置 MyVaneHttpExecutionContent.MyVaneHttpExecutionContent() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyVaneHttpExecutionContent.ConstructorString">
            <summary>设置 MyVaneHttpExecutionContent.MyVaneHttpExecutionContent(String tempVal) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyVaneHttpExecutionContent.MyCaseActuatorGet">
            <summary>设置 MyVaneHttpExecutionContent.get_MyCaseActuator() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyVaneHttpExecutionContent.MyCaseProtocolGet">
            <summary>设置 MyVaneHttpExecutionContent.get_MyCaseProtocol() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyVaneHttpExecutionContent.MyErrorMessageGet">
            <summary>设置 MyVaneHttpExecutionContent.get_MyErrorMessage() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyVaneHttpExecutionContent.MyExecutionContentGet">
            <summary>设置 MyVaneHttpExecutionContent.get_MyExecutionContent() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyVaneHttpExecutionContent.MyExecutionTargetGet">
            <summary>设置 MyVaneHttpExecutionContent.get_MyExecutionTarget() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimMyVaneHttpExecutionContent.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyVaneHttpExecutionContent.AllInstances.MyCaseActuatorGet">
            <summary>设置 MyVaneHttpExecutionContent.get_MyCaseActuator() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyVaneHttpExecutionContent.AllInstances.MyCaseProtocolGet">
            <summary>设置 MyVaneHttpExecutionContent.get_MyCaseProtocol() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyVaneHttpExecutionContent.AllInstances.MyErrorMessageGet">
            <summary>设置 MyVaneHttpExecutionContent.get_MyErrorMessage() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyVaneHttpExecutionContent.AllInstances.MyExecutionContentGet">
            <summary>设置 MyVaneHttpExecutionContent.get_MyExecutionContent() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimMyVaneHttpExecutionContent.AllInstances.MyExecutionTargetGet">
            <summary>设置 MyVaneHttpExecutionContent.get_MyExecutionTarget() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimParameterSave">
            <summary>CaseExecutiveActuator.ParameterSave 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimParameterSave.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimParameterSave.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimParameterSave.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimParameterSave.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimParameterSave.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimcaseParameterizationContent">
            <summary>CaseExecutiveActuator.caseParameterizationContent 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimcaseParameterizationContent.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimcaseParameterizationContent.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimcaseParameterizationContent.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimcaseParameterizationContent.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimcaseParameterizationContent.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyAutoHttpTest">
            <summary>CaseExecutiveActuator.myAutoHttpTest 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyAutoHttpTest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyAutoHttpTest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyAutoHttpTest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyAutoHttpTest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyAutoHttpTest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyCaseAttribute">
            <summary>CaseExecutiveActuator.myCaseAttribute 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyCaseAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyCaseAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyCaseAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyCaseAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyCaseLaodInfo">
            <summary>CaseExecutiveActuator.myCaseLaodInfo 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyCaseLaodInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyCaseLaodInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyCaseLaodInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyCaseLaodInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyCaseLaodInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyConnectForActiveMQ">
            <summary>CaseExecutiveActuator.myConnectForActiveMQ 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForActiveMQ.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForActiveMQ.#ctor(CaseExecutiveActuator.myConnectForActiveMQ)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForActiveMQ.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForActiveMQ.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForActiveMQ.Bind(CaseExecutiveActuator.IConnectExecutiveData)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyConnectForActiveMQ.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyConnectForActiveMQ.ConstructorCaseProtocolStringStringStringStringListOfStringListOfKeyValuePairOfStringString">
            <summary>设置 myConnectForActiveMQ.myConnectForActiveMQ(CaseProtocol yourCaseProtocol, String yourBrokerUri, String yourClientId, String yourFactoryUserName, String yourFactoryPassword, List`1&lt;String&gt; yourQueueList, List`1&lt;KeyValuePair`2&lt;String,String&gt;&gt; yourTopicList) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyConnectForActiveMQ.MyCaseProtocolGet">
            <summary>设置 myConnectForActiveMQ.get_MyCaseProtocol() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyConnectForActiveMQ.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyConnectForActiveMQ.AllInstances.MyCaseProtocolGet">
            <summary>设置 myConnectForActiveMQ.get_MyCaseProtocol() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyConnectForConsole">
            <summary>CaseExecutiveActuator.myConnectForConsole 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForConsole.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForConsole.#ctor(CaseExecutiveActuator.myConnectForConsole)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForConsole.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForConsole.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForConsole.Bind(CaseExecutiveActuator.IConnectExecutiveData)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyConnectForConsole.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyConnectForConsole.ConstructorCaseProtocol">
            <summary>设置 myConnectForConsole.myConnectForConsole(CaseProtocol yourCaseProtocol) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyConnectForConsole.MyCaseProtocolGet">
            <summary>设置 myConnectForConsole.get_MyCaseProtocol() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyConnectForConsole.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyConnectForConsole.AllInstances.MyCaseProtocolGet">
            <summary>设置 myConnectForConsole.get_MyCaseProtocol() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyConnectForHttp">
            <summary>CaseExecutiveActuator.myConnectForHttp 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForHttp.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForHttp.#ctor(CaseExecutiveActuator.myConnectForHttp)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForHttp.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForHttp.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForHttp.Bind(CaseExecutiveActuator.IConnectExecutiveData)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyConnectForHttp.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyConnectForHttp.ConstructorCaseProtocolString">
            <summary>设置 myConnectForHttp.myConnectForHttp(CaseProtocol yourCaseProtocol, String yourDefault_url) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyConnectForHttp.MyCaseProtocolGet">
            <summary>设置 myConnectForHttp.get_MyCaseProtocol() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyConnectForHttp.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyConnectForHttp.AllInstances.MyCaseProtocolGet">
            <summary>设置 myConnectForHttp.get_MyCaseProtocol() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyConnectForMysql">
            <summary>CaseExecutiveActuator.myConnectForMysql 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForMysql.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForMysql.#ctor(CaseExecutiveActuator.myConnectForMysql)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForMysql.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForMysql.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForMysql.Bind(CaseExecutiveActuator.IConnectExecutiveData)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyConnectForMysql.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyConnectForMysql.ConstructorCaseProtocolString">
            <summary>设置 myConnectForMysql.myConnectForMysql(CaseProtocol yourCaseProtocol, String yourConnectStr) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyConnectForMysql.MyCaseProtocolGet">
            <summary>设置 myConnectForMysql.get_MyCaseProtocol() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyConnectForMysql.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyConnectForMysql.AllInstances.MyCaseProtocolGet">
            <summary>设置 myConnectForMysql.get_MyCaseProtocol() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyConnectForVanelife_http">
            <summary>CaseExecutiveActuator.myConnectForVanelife_http 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForVanelife_http.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForVanelife_http.#ctor(CaseExecutiveActuator.myConnectForVanelife_http)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForVanelife_http.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForVanelife_http.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyConnectForVanelife_http.Bind(CaseExecutiveActuator.IConnectExecutiveData)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyConnectForVanelife_http.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyConnectForVanelife_http.ConstructorCaseProtocolStringStringString">
            <summary>设置 myConnectForVanelife_http.myConnectForVanelife_http(CaseProtocol yourCaseProtocol, String yourDev_key, String yourDev_secret, String yourDefault_url) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyConnectForVanelife_http.MyCaseProtocolGet">
            <summary>设置 myConnectForVanelife_http.get_MyCaseProtocol() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyConnectForVanelife_http.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyConnectForVanelife_http.AllInstances.MyCaseProtocolGet">
            <summary>设置 myConnectForVanelife_http.get_MyCaseProtocol() 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyExpectInfo">
            <summary>CaseExecutiveActuator.myExpectInfo 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyExpectInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyExpectInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyExpectInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyExpectInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyExpectInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyHttpBackData">
            <summary>CaseExecutiveActuator.myHttpBackData 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyHttpBackData.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyHttpBackData.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyHttpBackData.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyHttpBackData.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyHttpBackData.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyNewTestInfo">
            <summary>CaseExecutiveActuator.myNewTestInfo 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyNewTestInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyNewTestInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyNewTestInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyNewTestInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyNewTestInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo">
            <summary>CaseExecutiveActuator.myTreeTagInfo 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo.#ctor(CaseExecutiveActuator.myTreeTagInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo.ConstructorCaseTypeXmlNode">
            <summary>设置 myTreeTagInfo.myTreeTagInfo(CaseType yourCaseType, XmlNode yourXmlNode) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo.ConstructorCaseTypeXmlNodeMyRunCaseDataOfICaseExecutionContent">
            <summary>设置 myTreeTagInfo.myTreeTagInfo(CaseType yourCaseType, XmlNode yourXmlNode, MyRunCaseData`1&lt;ICaseExecutionContent&gt; yourCaseRunData) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo_">
            <summary>CaseExecutiveActuator.myTreeTagInfo_ 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo_.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo_.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo_.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo_.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.ShimmyTreeTagInfo_.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubActuatorStaticDataCollection">
            <summary>CaseExecutiveActuator.ActuatorStaticDataCollection 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubActuatorStaticDataCollection.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubActuatorStaticDataCollection.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,CaseExecutiveActuator.IRunTimeStaticData},System.Collections.Generic.Dictionary{System.String,CaseExecutiveActuator.IRunTimeDataSource})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubActuatorStaticDataCollection.InitializeStub">
            <summary>初始化 type StubActuatorStaticDataCollection 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubActuatorStaticDataCollection.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubActuatorStaticDataCollection.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubActuatorStaticDataCollection.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubBasicProtocolPars">
            <summary>CaseExecutiveActuator.BasicProtocolPars 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubBasicProtocolPars.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubBasicProtocolPars.InitializeStub">
            <summary>初始化 type StubBasicProtocolPars 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubBasicProtocolPars.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubBasicProtocolPars.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubBasicProtocolPars.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubCaseActionActuator">
            <summary>CaseExecutiveActuator.CaseActionActuator 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubCaseActionActuator.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubCaseActionActuator.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubCaseActionActuator.InitializeStub">
            <summary>初始化 type StubCaseActionActuator 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseActionActuator.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseActionActuator.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseActionActuator.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubCaseActionDescription">
            <summary>CaseExecutiveActuator.CaseActionDescription 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubCaseActionDescription.#ctor(CaseExecutiveActuator.CaseAction,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubCaseActionDescription.InitializeStub">
            <summary>初始化 type StubCaseActionDescription 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseActionDescription.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseActionDescription.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseActionDescription.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForActiveMQ">
            <summary>CaseExecutiveActuator.CaseProtocolExecutionForActiveMQ 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForActiveMQ.#ctor(CaseExecutiveActuator.myConnectForActiveMQ)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForActiveMQ.InitializeStub">
            <summary>初始化 type StubCaseProtocolExecutionForActiveMQ 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForActiveMQ.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForActiveMQ.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForActiveMQ.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForConsole">
            <summary>CaseExecutiveActuator.CaseProtocolExecutionForConsole 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForConsole.#ctor(CaseExecutiveActuator.myConnectForConsole)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForConsole.InitializeStub">
            <summary>初始化 type StubCaseProtocolExecutionForConsole 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForConsole.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForConsole.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForConsole.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForHttp">
            <summary>CaseExecutiveActuator.CaseProtocolExecutionForHttp 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForHttp.#ctor(CaseExecutiveActuator.myConnectForHttp)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForHttp.InitializeStub">
            <summary>初始化 type StubCaseProtocolExecutionForHttp 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForHttp.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForHttp.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForHttp.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForMysql">
            <summary>CaseExecutiveActuator.CaseProtocolExecutionForMysql 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForMysql.#ctor(CaseExecutiveActuator.myConnectForMysql)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForMysql.InitializeStub">
            <summary>初始化 type StubCaseProtocolExecutionForMysql 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForMysql.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForMysql.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForMysql.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForVanelife_http">
            <summary>CaseExecutiveActuator.CaseProtocolExecutionForVanelife_http 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForVanelife_http.#ctor(CaseExecutiveActuator.myConnectForVanelife_http)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForVanelife_http.InitializeStub">
            <summary>初始化 type StubCaseProtocolExecutionForVanelife_http 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForVanelife_http.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForVanelife_http.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubCaseProtocolExecutionForVanelife_http.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubICaseExecutionContent">
            <summary>CaseExecutiveActuator.ICaseExecutionContent 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubICaseExecutionContent.#ctor">
            <summary>初始化 type StubICaseExecutionContent 的新实例</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubICaseExecutionContent.MyCaseActuatorGet">
            <summary>设置 ICaseExecutionContent.get_MyCaseActuator() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubICaseExecutionContent.MyCaseProtocolGet">
            <summary>设置 ICaseExecutionContent.get_MyCaseProtocol() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubICaseExecutionContent.MyErrorMessageGet">
            <summary>设置 ICaseExecutionContent.get_MyErrorMessage() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubICaseExecutionContent.MyExecutionContentGet">
            <summary>设置 ICaseExecutionContent.get_MyExecutionContent() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubICaseExecutionContent.MyExecutionTargetGet">
            <summary>设置 ICaseExecutionContent.get_MyExecutionTarget() 的 stub</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubICaseExecutionContent.cea::CaseExecutiveActuator#ICaseExecutionContent#MyCaseActuator">
            <summary>设置 ICaseExecutionContent.get_MyCaseActuator() 的 stub</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubICaseExecutionContent.cea::CaseExecutiveActuator#ICaseExecutionContent#MyCaseProtocol">
            <summary>设置 ICaseExecutionContent.get_MyCaseProtocol() 的 stub</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubICaseExecutionContent.cea::CaseExecutiveActuator#ICaseExecutionContent#MyErrorMessage">
            <summary>设置 ICaseExecutionContent.get_MyErrorMessage() 的 stub</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubICaseExecutionContent.cea::CaseExecutiveActuator#ICaseExecutionContent#MyExecutionContent">
            <summary>设置 ICaseExecutionContent.get_MyExecutionContent() 的 stub</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubICaseExecutionContent.cea::CaseExecutiveActuator#ICaseExecutionContent#MyExecutionTarget">
            <summary>设置 ICaseExecutionContent.get_MyExecutionTarget() 的 stub</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice">
            <summary>CaseExecutiveActuator.ICaseExecutionDevice 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.#ctor">
            <summary>初始化 type StubICaseExecutionDevice 的新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.cea::CaseExecutiveActuator#ICaseExecutionDevice#ExecutionDeviceClose">
            <summary>设置 ICaseExecutionDevice.ExecutionDeviceClose() 的 存根</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.cea::CaseExecutiveActuator#ICaseExecutionDevice#ExecutionDeviceConnect">
            <summary>设置 ICaseExecutionDevice.ExecutionDeviceConnect() 的 存根</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.cea::CaseExecutiveActuator#ICaseExecutionDevice#ExecutionDeviceRun(CaseExecutiveActuator.ICaseExecutionContent,CaseExecutiveActuator.delegateGetExecutiveData,System.String,CaseExecutiveActuator.ActuatorStaticDataCollection,System.Int32)">
            <summary>设置 ICaseExecutionDevice.ExecutionDeviceRun(ICaseExecutionContent yourExecutionContent, delegateGetExecutiveData yourExecutiveDelegate, String sender, ActuatorStaticDataCollection yourActuatorStaticDataCollection, Int32 caseId) 的 存根</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.Clone">
            <summary>设置 ICloneable.Clone() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.ExecutionDeviceClose">
            <summary>设置 ICaseExecutionDevice.ExecutionDeviceClose() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.ExecutionDeviceConnect">
            <summary>设置 ICaseExecutionDevice.ExecutionDeviceConnect() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.ExecutionDeviceRunICaseExecutionContentdelegateGetExecutiveDataStringActuatorStaticDataCollectionInt32">
            <summary>设置 ICaseExecutionDevice.ExecutionDeviceRun(ICaseExecutionContent yourExecutionContent, delegateGetExecutiveData yourExecutiveDelegate, String sender, ActuatorStaticDataCollection yourActuatorStaticDataCollection, Int32 caseId) 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.IsDeviceConnectGet">
            <summary>设置 ICaseExecutionDevice.get_IsDeviceConnect() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.ProtocolTypeGet">
            <summary>设置 ICaseExecutionDevice.get_ProtocolType() 的 stub</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.global::System#ICloneable#Clone">
            <summary>设置 ICloneable.Clone() 的 存根</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.cea::CaseExecutiveActuator#ICaseExecutionDevice#IsDeviceConnect">
            <summary>设置 ICaseExecutionDevice.get_IsDeviceConnect() 的 stub</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubICaseExecutionDevice.cea::CaseExecutiveActuator#ICaseExecutionDevice#ProtocolType">
            <summary>设置 ICaseExecutionDevice.get_ProtocolType() 的 stub</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubICaseProtocolExecution">
            <summary>CaseExecutiveActuator.ICaseProtocolExecution 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubICaseProtocolExecution.#ctor">
            <summary>初始化 type StubICaseProtocolExecution 的新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubICaseProtocolExecution.cea::CaseExecutiveActuator#ICaseProtocolExecution#ExecutionProtocolCase">
            <summary>设置 ICaseProtocolExecution.ExecutionProtocolCase() 的 存根</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubICaseProtocolExecution.ExecutionProtocolCase">
            <summary>设置 ICaseProtocolExecution.ExecutionProtocolCase() 的 stub</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubIConnectExecutiveData">
            <summary>CaseExecutiveActuator.IConnectExecutiveData 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIConnectExecutiveData.#ctor">
            <summary>初始化 type StubIConnectExecutiveData 的新实例</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIConnectExecutiveData.MyCaseProtocolGet">
            <summary>设置 IConnectExecutiveData.get_MyCaseProtocol() 的 stub</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubIConnectExecutiveData.cea::CaseExecutiveActuator#IConnectExecutiveData#MyCaseProtocol">
            <summary>设置 IConnectExecutiveData.get_MyCaseProtocol() 的 stub</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource">
            <summary>CaseExecutiveActuator.IRunTimeDataSource 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.#ctor">
            <summary>初始化 type StubIRunTimeDataSource 的新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.cea::CaseExecutiveActuator#IRunTimeDataSource#ConnectDataSource">
            <summary>设置 IRunTimeDataSource.ConnectDataSource() 的 存根</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.cea::CaseExecutiveActuator#IRunTimeDataSource#DataSet(System.String,System.String)">
            <summary>设置 IRunTimeDataSource.DataSet(String vauleAddress, String expectData) 的 存根</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.cea::CaseExecutiveActuator#IRunTimeDataSource#DisConnectDataSource">
            <summary>设置 IRunTimeDataSource.DisConnectDataSource() 的 存根</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.cea::CaseExecutiveActuator#IRunTimeDataSource#GetDataVaule(System.String)">
            <summary>设置 IRunTimeDataSource.GetDataVaule(String vauleAddress) 的 存根</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.cea::CaseExecutiveActuator#IRunTimeStaticData#DataCurrent">
            <summary>设置 IRunTimeStaticData.DataCurrent() 的 存根</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.cea::CaseExecutiveActuator#IRunTimeStaticData#DataMoveNext">
            <summary>设置 IRunTimeStaticData.DataMoveNext() 的 存根</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.cea::CaseExecutiveActuator#IRunTimeStaticData#DataReset">
            <summary>设置 IRunTimeStaticData.DataReset() 的 存根</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.cea::CaseExecutiveActuator#IRunTimeStaticData#DataSet(System.String)">
            <summary>设置 IRunTimeStaticData.DataSet(String expectData) 的 存根</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.Clone">
            <summary>设置 ICloneable.Clone() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.ConnectDataSource">
            <summary>设置 IRunTimeDataSource.ConnectDataSource() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.DataCurrent">
            <summary>设置 IRunTimeStaticData.DataCurrent() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.DataMoveNext">
            <summary>设置 IRunTimeStaticData.DataMoveNext() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.DataReset">
            <summary>设置 IRunTimeStaticData.DataReset() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.DataSetString">
            <summary>设置 IRunTimeStaticData.DataSet(String expectData) 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.DataSetStringString">
            <summary>设置 IRunTimeDataSource.DataSet(String vauleAddress, String expectData) 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.DisConnectDataSource">
            <summary>设置 IRunTimeDataSource.DisConnectDataSource() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.GetDataVauleString">
            <summary>设置 IRunTimeDataSource.GetDataVaule(String vauleAddress) 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.IsConnectedGet">
            <summary>设置 IRunTimeDataSource.get_IsConnected() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.RunTimeStaticDataTypeGet">
            <summary>设置 IRunTimeStaticData.get_RunTimeStaticDataType() 的 stub</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.global::System#ICloneable#Clone">
            <summary>设置 ICloneable.Clone() 的 存根</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.cea::CaseExecutiveActuator#IRunTimeDataSource#IsConnected">
            <summary>设置 IRunTimeDataSource.get_IsConnected() 的 stub</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubIRunTimeDataSource.cea::CaseExecutiveActuator#IRunTimeStaticData#RunTimeStaticDataType">
            <summary>设置 IRunTimeStaticData.get_RunTimeStaticDataType() 的 stub</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData">
            <summary>CaseExecutiveActuator.IRunTimeStaticData 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.#ctor">
            <summary>初始化 type StubIRunTimeStaticData 的新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.cea::CaseExecutiveActuator#IRunTimeStaticData#DataCurrent">
            <summary>设置 IRunTimeStaticData.DataCurrent() 的 存根</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.cea::CaseExecutiveActuator#IRunTimeStaticData#DataMoveNext">
            <summary>设置 IRunTimeStaticData.DataMoveNext() 的 存根</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.cea::CaseExecutiveActuator#IRunTimeStaticData#DataReset">
            <summary>设置 IRunTimeStaticData.DataReset() 的 存根</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.cea::CaseExecutiveActuator#IRunTimeStaticData#DataSet(System.String)">
            <summary>设置 IRunTimeStaticData.DataSet(String expectData) 的 存根</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.Clone">
            <summary>设置 ICloneable.Clone() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.DataCurrent">
            <summary>设置 IRunTimeStaticData.DataCurrent() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.DataMoveNext">
            <summary>设置 IRunTimeStaticData.DataMoveNext() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.DataReset">
            <summary>设置 IRunTimeStaticData.DataReset() 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.DataSetString">
            <summary>设置 IRunTimeStaticData.DataSet(String expectData) 的 stub</summary>
        </member>
        <member name="F:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.RunTimeStaticDataTypeGet">
            <summary>设置 IRunTimeStaticData.get_RunTimeStaticDataType() 的 stub</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.global::System#ICloneable#Clone">
            <summary>设置 ICloneable.Clone() 的 存根</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubIRunTimeStaticData.cea::CaseExecutiveActuator#IRunTimeStaticData#RunTimeStaticDataType">
            <summary>设置 IRunTimeStaticData.get_RunTimeStaticDataType() 的 stub</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubMyActiveMQExecutionContent">
            <summary>CaseExecutiveActuator.MyActiveMQExecutionContent 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyActiveMQExecutionContent.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyActiveMQExecutionContent.InitializeStub">
            <summary>初始化 type StubMyActiveMQExecutionContent 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyActiveMQExecutionContent.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyActiveMQExecutionContent.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyActiveMQExecutionContent.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubMyBasicHttpExecutionContent">
            <summary>CaseExecutiveActuator.MyBasicHttpExecutionContent 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyBasicHttpExecutionContent.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyBasicHttpExecutionContent.InitializeStub">
            <summary>初始化 type StubMyBasicHttpExecutionContent 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyBasicHttpExecutionContent.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyBasicHttpExecutionContent.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyBasicHttpExecutionContent.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubMyCaseDataTypeEngine">
            <summary>CaseExecutiveActuator.MyCaseDataTypeEngine 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyCaseDataTypeEngine.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyCaseDataTypeEngine.InitializeStub">
            <summary>初始化 type StubMyCaseDataTypeEngine 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyCaseDataTypeEngine.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyCaseDataTypeEngine.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyCaseDataTypeEngine.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubMyCaseScriptAnalysisEngine">
            <summary>CaseExecutiveActuator.MyCaseScriptAnalysisEngine 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyCaseScriptAnalysisEngine.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyCaseScriptAnalysisEngine.InitializeStub">
            <summary>初始化 type StubMyCaseScriptAnalysisEngine 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyCaseScriptAnalysisEngine.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyCaseScriptAnalysisEngine.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyCaseScriptAnalysisEngine.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubMyCelerityCaseRunTime">
            <summary>CaseExecutiveActuator.MyCelerityCaseRunTime 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyCelerityCaseRunTime.#ctor(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Windows.Forms.TreeNode}})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyCelerityCaseRunTime.InitializeStub">
            <summary>初始化 type StubMyCelerityCaseRunTime 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyCelerityCaseRunTime.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyCelerityCaseRunTime.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyCelerityCaseRunTime.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubMyConfiguration">
            <summary>CaseExecutiveActuator.MyConfiguration 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyConfiguration.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyConfiguration.InitializeStub">
            <summary>初始化 type StubMyConfiguration 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyConfiguration.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyConfiguration.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyConfiguration.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubMyConsoleExecutionContent">
            <summary>CaseExecutiveActuator.MyConsoleExecutionContent 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyConsoleExecutionContent.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyConsoleExecutionContent.InitializeStub">
            <summary>初始化 type StubMyConsoleExecutionContent 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyConsoleExecutionContent.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyConsoleExecutionContent.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyConsoleExecutionContent.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubMyExecutionDeviceResult">
            <summary>CaseExecutiveActuator.MyExecutionDeviceResult 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyExecutionDeviceResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyExecutionDeviceResult.#ctor(System.Int32,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyExecutionDeviceResult.#ctor(CaseExecutiveActuator.CaseProtocol,System.String,System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyExecutionDeviceResult.#ctor(CaseExecutiveActuator.CaseProtocol,System.String,System.String,System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyExecutionDeviceResult.InitializeStub">
            <summary>初始化 type StubMyExecutionDeviceResult 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyExecutionDeviceResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyExecutionDeviceResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyExecutionDeviceResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubMyMySqlExecutionContent">
            <summary>CaseExecutiveActuator.MyMySqlExecutionContent 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyMySqlExecutionContent.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyMySqlExecutionContent.InitializeStub">
            <summary>初始化 type StubMyMySqlExecutionContent 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyMySqlExecutionContent.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyMySqlExecutionContent.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyMySqlExecutionContent.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubMyRunCaseData`1">
            <summary>CaseExecutiveActuator.MyRunCaseData`1 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyRunCaseData`1.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyRunCaseData`1.#ctor(`0,System.Int32,CaseExecutiveActuator.CaseProtocol)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyRunCaseData`1.#ctor(`0,System.Int32,CaseExecutiveActuator.CaseProtocol,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyRunCaseData`1.InitializeStub">
            <summary>初始化 type StubMyRunCaseData 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyRunCaseData`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyRunCaseData`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyRunCaseData`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubMyVaneHttpExecutionContent">
            <summary>CaseExecutiveActuator.MyVaneHttpExecutionContent 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyVaneHttpExecutionContent.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyVaneHttpExecutionContent.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubMyVaneHttpExecutionContent.InitializeStub">
            <summary>初始化 type StubMyVaneHttpExecutionContent 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyVaneHttpExecutionContent.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyVaneHttpExecutionContent.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubMyVaneHttpExecutionContent.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubmyConnectForActiveMQ">
            <summary>CaseExecutiveActuator.myConnectForActiveMQ 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyConnectForActiveMQ.#ctor(CaseExecutiveActuator.CaseProtocol,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyConnectForActiveMQ.InitializeStub">
            <summary>初始化 type StubmyConnectForActiveMQ 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyConnectForActiveMQ.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyConnectForActiveMQ.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyConnectForActiveMQ.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubmyConnectForConsole">
            <summary>CaseExecutiveActuator.myConnectForConsole 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyConnectForConsole.#ctor(CaseExecutiveActuator.CaseProtocol)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyConnectForConsole.InitializeStub">
            <summary>初始化 type StubmyConnectForConsole 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyConnectForConsole.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyConnectForConsole.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyConnectForConsole.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubmyConnectForHttp">
            <summary>CaseExecutiveActuator.myConnectForHttp 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyConnectForHttp.#ctor(CaseExecutiveActuator.CaseProtocol,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyConnectForHttp.InitializeStub">
            <summary>初始化 type StubmyConnectForHttp 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyConnectForHttp.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyConnectForHttp.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyConnectForHttp.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubmyConnectForMysql">
            <summary>CaseExecutiveActuator.myConnectForMysql 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyConnectForMysql.#ctor(CaseExecutiveActuator.CaseProtocol,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyConnectForMysql.InitializeStub">
            <summary>初始化 type StubmyConnectForMysql 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyConnectForMysql.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyConnectForMysql.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyConnectForMysql.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubmyConnectForVanelife_http">
            <summary>CaseExecutiveActuator.myConnectForVanelife_http 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyConnectForVanelife_http.#ctor(CaseExecutiveActuator.CaseProtocol,System.String,System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyConnectForVanelife_http.InitializeStub">
            <summary>初始化 type StubmyConnectForVanelife_http 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyConnectForVanelife_http.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyConnectForVanelife_http.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyConnectForVanelife_http.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.Fakes.StubmyTreeTagInfo">
            <summary>CaseExecutiveActuator.myTreeTagInfo 的存根类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyTreeTagInfo.#ctor(CaseExecutiveActuator.CaseType,System.Xml.XmlNode)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyTreeTagInfo.#ctor(CaseExecutiveActuator.CaseType,System.Xml.XmlNode,CaseExecutiveActuator.MyRunCaseData{CaseExecutiveActuator.ICaseExecutionContent})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.Fakes.StubmyTreeTagInfo.InitializeStub">
            <summary>初始化 type StubmyTreeTagInfo 的新实例</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyTreeTagInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyTreeTagInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CaseExecutiveActuator.Fakes.StubmyTreeTagInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:CaseExecutiveActuator.ProtocolExecutive.Fakes.ShimAtHttpProtocol">
            <summary>CaseExecutiveActuator.ProtocolExecutive.AtHttpProtocol 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.ProtocolExecutive.Fakes.ShimAtHttpProtocol.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.ProtocolExecutive.Fakes.ShimAtHttpProtocol.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.ProtocolExecutive.Fakes.ShimAtHttpProtocol.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.ProtocolExecutive.Fakes.ShimAtHttpProtocol.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:CaseExecutiveActuator.ProtocolExecutive.Fakes.ShimAtHttpProtocol.ShimHttpClient">
            <summary>CaseExecutiveActuator.ProtocolExecutive.AtHttpProtocol+HttpClient 的填充码类型</summary>
        </member>
        <member name="M:CaseExecutiveActuator.ProtocolExecutive.Fakes.ShimAtHttpProtocol.ShimHttpClient.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CaseExecutiveActuator.ProtocolExecutive.Fakes.ShimAtHttpProtocol.ShimHttpClient.#ctor(CaseExecutiveActuator.ProtocolExecutive.AtHttpProtocol.HttpClient)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:CaseExecutiveActuator.ProtocolExecutive.Fakes.ShimAtHttpProtocol.ShimHttpClient.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CaseExecutiveActuator.ProtocolExecutive.Fakes.ShimAtHttpProtocol.ShimHttpClient.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.ProtocolExecutive.Fakes.ShimAtHttpProtocol.ShimHttpClient.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:CaseExecutiveActuator.ProtocolExecutive.Fakes.ShimAtHttpProtocol.ShimHttpClient.Constructor">
            <summary>设置 HttpClient.HttpClient() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.ProtocolExecutive.Fakes.ShimAtHttpProtocol.ShimHttpClient.HttpPostDataStringInt32StringStringBooleanStringStringMyExecutionDeviceResult">
            <summary>设置 HttpClient.HttpPostData(String url, Int32 timeOut, String name, String filename, Boolean isFile, String filePath, String bodyParameter, MyExecutionDeviceResult myEdr) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.ProtocolExecutive.Fakes.ShimAtHttpProtocol.ShimHttpClient.HttpPostDataStringListOfKeyValuePairOfStringStringStringListOfMyWebToolHttpMultipartDateStringInt32EncodingMyExecutionDeviceResult">
            <summary>设置 HttpClient.HttpPostData(String url, List`1&lt;KeyValuePair`2&lt;String,String&gt;&gt; heads, String bodyData, List`1&lt;HttpMultipartDate&gt; multipartDateList, String bodyMultipartParameter, Int32 timeOut, Encoding yourBodyEncoding, MyExecutionDeviceResult myEdr) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.ProtocolExecutive.Fakes.ShimAtHttpProtocol.ShimHttpClient.SendDataSaveExStringStringStringListOfKeyValuePairOfStringStringMyExecutionDeviceResultString">
            <summary>设置 HttpClient.SendDataSaveEx(String url, String data, String method, List`1&lt;KeyValuePair`2&lt;String,String&gt;&gt; heads, MyExecutionDeviceResult myEdr, String saveFileName) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.ProtocolExecutive.Fakes.ShimAtHttpProtocol.ShimHttpClient.SendDataSaveExStringStringStringMyExecutionDeviceResultString">
            <summary>设置 HttpClient.SendDataSaveEx(String url, String data, String method, MyExecutionDeviceResult myEdr, String saveFileName) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.ProtocolExecutive.Fakes.ShimAtHttpProtocol.ShimHttpClient.SendDataStringStringStringListOfKeyValuePairOfStringStringMyExecutionDeviceResult">
            <summary>设置 HttpClient.SendData(String url, String data, String method, List`1&lt;KeyValuePair`2&lt;String,String&gt;&gt; heads, MyExecutionDeviceResult myEdr) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.ProtocolExecutive.Fakes.ShimAtHttpProtocol.ShimHttpClient.SendDataStringStringStringListOfKeyValuePairOfStringStringMyExecutionDeviceResultString">
            <summary>设置 HttpClient.SendData(String url, String data, String method, List`1&lt;KeyValuePair`2&lt;String,String&gt;&gt; heads, MyExecutionDeviceResult myEdr, String saveFileName) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.ProtocolExecutive.Fakes.ShimAtHttpProtocol.ShimHttpClient.SendDataStringStringStringMyExecutionDeviceResult">
            <summary>设置 HttpClient.SendData(String url, String data, String method, MyExecutionDeviceResult myEdr) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.ProtocolExecutive.Fakes.ShimAtHttpProtocol.ShimHttpClient.SendDataStringStringStringMyExecutionDeviceResultString">
            <summary>设置 HttpClient.SendData(String url, String data, String method, MyExecutionDeviceResult myEdr, String saveFileName) 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.ProtocolExecutive.Fakes.ShimAtHttpProtocol.ShimHttpClient.StaticConstructor">
            <summary>设置 HttpClient.HttpClient() 的 填充码</summary>
        </member>
        <member name="P:CaseExecutiveActuator.ProtocolExecutive.Fakes.ShimAtHttpProtocol.ShimHttpClient._cctorb__0ObjectX509CertificateX509ChainSslPolicyErrors">
            <summary>设置 HttpClient.&lt;.cctor&gt;b__0(Object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) 的 填充码</summary>
        </member>
        <member name="T:CaseExecutiveActuator.ProtocolExecutive.Fakes.ShimAtHttpProtocol.ShimHttpClient.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Delegates.CaseExecutiveActuatorDelegates">
            <summary>包含用于 CaseExecutiveActuator 的存根和填充码的自定义委托</summary>
        </member>
    </members>
</doc>
