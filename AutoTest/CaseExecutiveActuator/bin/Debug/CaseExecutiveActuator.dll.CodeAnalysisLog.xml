<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 12.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="12.0">
 <Targets>
  <Target Name="F:\file\Code\AutoTest\AutoTest\CaseExecutiveActuator\bin\Debug\CaseExecutiveActuator.dll">
   <Modules>
    <Module Name="caseexecutiveactuator.dll">
     <Namespaces>
      <Namespace Name="CaseExecutiveActuator">
       <Types>
        <Type Name="ICaseExecutionDevice" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#OnGetExecutiveData" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2018-01-23 09:06:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">将 'delegateGetExecutiveData' 的第一个参数声明为一个名为“sender”的对象。</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">将 'delegateGetExecutiveData' 的第二个参数声明为 EventArgs，或者声明为扩展 EventArgs 的类型的名为“e”的实例。</Issue>
             <Issue Name="TooMany" Certainty="95" Level="Error">移除 'delegateGetExecutiveData' 的除前两个参数以外的所有参数。</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="CaseExecutiveActuator.CaseActuator">
       <Types>
        <Type Name="ActuatorStaticDataCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2018-01-23 09:06:45Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">对 'ActuatorStaticDataCollection' 提供 Dispose(bool) 的可重写实现或将该类型标记为密封。对 Dispose(false) 的调用应仅清理本机资源。对 Dispose(true) 的调用应既清理托管资源又清理本机资源。</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2018-01-23 09:06:45Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="f:\file\Code\AutoTest\AutoTest\CaseExecutiveActuator\CaseActuator" File="CaseActionActuator.cs" Line="353">修改 'ActuatorStaticDataCollection.Dispose()'，使它先调用 Dispose(true)，然后对当前对象实例(在 Visual Basic 中为“this”或“Me”)调用 GC.SuppressFinalize，最后返回。</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CaseActionActuator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Dispose(System.Boolean)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="executiveManualResetEvent" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2018-01-23 09:06:45Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="f:\file\Code\AutoTest\AutoTest\CaseExecutiveActuator\CaseActuator" File="CaseActionActuator.cs" Line="2255">'CaseActionActuator' 包含 IDisposable 类型的字段 'CaseActionActuator.executiveManualResetEvent':  'ManualResetEvent'。请更改 'CaseActionActuator' 的 Dispose 方法，使其针对该字段调用 Dispose 或 Close。</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2018-01-23 09:06:45Z" FixCategory="Breaking">
             <Issue Name="DisposeBoolSignature" Certainty="95" Level="Error" Path="f:\file\Code\AutoTest\AutoTest\CaseExecutiveActuator\CaseActuator" File="CaseActionActuator.cs" Line="2255">确保将 'CaseActionActuator.Dispose(bool)' 声明为 protected、 virtual 和 unsealed。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnActuatorStateChanged" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2018-01-23 09:06:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">将 'CaseActionActuator.delegateGetActuatorStateEventHandler' 的第一个参数声明为一个名为“sender”的对象。</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">将 'CaseActionActuator.delegateGetActuatorStateEventHandler' 的第二个参数声明为 EventArgs，或者声明为扩展 EventArgs 的类型的名为“e”的实例。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnExecutiveResult" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2018-01-23 09:06:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">将 'CaseActionActuator.delegateGetExecutiveResultEventHandler' 的第一个参数声明为一个名为“sender”的对象。</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">将 'CaseActionActuator.delegateGetExecutiveResultEventHandler' 的第二个参数声明为 EventArgs，或者声明为扩展 EventArgs 的类型的名为“e”的实例。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnGetExecutiveData" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2018-01-23 09:06:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">将 'delegateGetExecutiveData' 的第一个参数声明为一个名为“sender”的对象。</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">将 'delegateGetExecutiveData' 的第二个参数声明为 EventArgs，或者声明为扩展 EventArgs 的类型的名为“e”的实例。</Issue>
             <Issue Name="TooMany" Certainty="95" Level="Error">移除 'delegateGetExecutiveData' 的除前两个参数以外的所有参数。</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MyCaseRunTime" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#OnLoopChangeEvent" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2018-01-23 09:06:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">将 'delegateLoopChangeEventHandler' 的第一个参数声明为一个名为“sender”的对象。</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">将 'delegateLoopChangeEventHandler' 的第二个参数声明为 EventArgs，或者声明为扩展 EventArgs 的类型的名为“e”的实例。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnQueueChangeEvent" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2018-01-23 09:06:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">将 'delegateQueueChangeEventHandler' 的第一个参数声明为一个名为“sender”的对象。</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">将 'delegateQueueChangeEventHandler' 的第二个参数声明为 EventArgs，或者声明为扩展 EventArgs 的类型的名为“e”的实例。</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="CaseExecutiveActuator.CaseActuator.ExecutionDevice">
       <Types>
        <Type Name="CaseProtocolExecutionForMysql" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2018-01-23 09:06:45Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">在 'CaseProtocolExecutionForMysql' 上实现 IDisposable，因为它创建下列 IDisposable 类型的成员:  'MySqlDrive'。如果以前提供过 'CaseProtocolExecutionForMysql'，对于现有使用者来说，向此类型添加用于实现 IDisposable 的新成员属于重大更改。</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009">
   <Name>正确声明事件处理程序</Name>
   <Description>按照约定，.NET 事件有两个参数，分别用于指定事件发送方和事件数据。事件处理程序签名应遵循以下形式:  void MyEventHandler(object sender, EventArgs e)。“sender”参数的类型始终是 System.Object，即使该参数可能使用更具体的类型。“e”参数的类型始终是 System.EventArgs。不提供事件数据的事件应使用 System.EventHandler 委托类型。事件处理程序返回 void 以便将每个事件发送给多个目标方法。目标返回的任何值在第一次调用之后将会丢失。</Description>
   <Resolution Name="First">将 {0} 的第一个参数声明为一个名为“sender”的对象。</Resolution>
   <Resolution Name="Second">将 {0} 的第二个参数声明为 EventArgs，或者声明为扩展 EventArgs 的类型的名为“e”的实例。</Resolution>
   <Resolution Name="TooMany">移除 {0} 的除前两个参数以外的所有参数。</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182133.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213">
   <Name>应释放可释放的字段</Name>
   <Description>如果实现了 IDisposable 的类型拥有同样实现 IDisposable 的字段，则封装类型的 Dispose() 实现应对每个可释放字段调用 Dispose()。</Description>
   <Resolution Name="Default">{0} 包含 IDisposable 类型的字段 {1}:  {2}。请更改 {0} 的 Dispose 方法，使其针对该字段调用 Dispose 或 Close。</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182328.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063">
   <Name>正确实现 IDisposable</Name>
   <Description>所有 IDisposable 类型都应正确实现 Dispose 模式。</Description>
   <Resolution Name="DisposeBoolSignature">确保将 {0} 声明为 protected、 virtual 和 unsealed。</Resolution>
   <Resolution Name="DisposeImplementation">修改 {0}，使它先调用 Dispose(true)，然后对当前对象实例(在 Visual Basic 中为“this”或“Me”)调用 GC.SuppressFinalize，最后返回。</Resolution>
   <Resolution Name="ProvideDisposeBool">对 {0} 提供 Dispose(bool) 的可重写实现或将该类型标记为密封。对 Dispose(false) 的调用应仅清理本机资源。对 Dispose(true) 的调用应既清理托管资源又清理本机资源。</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms244737.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001">
   <Name>具有可释放字段的类型应该是可释放的</Name>
   <Description>声明可释放成员的类型也应实现 IDisposable。如果该类型没有任何非托管资源，请不要在其上实现终结器。</Description>
   <Resolution Name="DependsOnFix">在 {0} 上实现 IDisposable，因为它创建下列 IDisposable 类型的成员:  {1}。如果以前提供过 {0}，对于现有使用者来说，向此类型添加用于实现 IDisposable 的新成员属于重大更改。</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182172.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">类别</String>
  <String Key="Certainty">确定性</String>
  <String Key="CollapseAll">全部折叠</String>
  <String Key="CheckId">检查 ID</String>
  <String Key="Error">错误</String>
  <String Key="Errors">错误</String>
  <String Key="ExpandAll">全部展开</String>
  <String Key="Help">帮助</String>
  <String Key="Line">行</String>
  <String Key="Messages">消息</String>
  <String Key="LocationNotStoredInPdb">[位置未存储在 Pdb 中]</String>
  <String Key="Project">项目</String>
  <String Key="Resolution">解析</String>
  <String Key="Rule">规则</String>
  <String Key="RuleFile">规则文件</String>
  <String Key="RuleDescription">规则说明</String>
  <String Key="Source">源</String>
  <String Key="Status">状态</String>
  <String Key="Target">目标</String>
  <String Key="Warning">警告</String>
  <String Key="Warnings">警告</String>
  <String Key="ReportTitle">代码分析报告</String>
 </Localized>
</FxCopReport>
